{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-group",
  "type": "registry:ui",
  "title": "tag-group",
  "author": "BaseLayer",
  "description": "A tag group is a focusable list of labels, categories, keywords, filters, or other items, with support for keyboard navigation, selection, and removal.",
  "dependencies": [
    "react-aria-components",
    "tailwind-variants",
    "lucide-react",
    "tw-animate-css"
  ],
  "files": [
    {
      "path": "src/core/tag-group/tag-group.tsx",
      "content": "\"use client\";\n\nimport {\n\tTag as AriaTag,\n\tTagGroup as AriaTagGroup,\n\ttype TagGroupProps as AriaTagGroupProps,\n\ttype TagProps as AriaTagProps,\n\tLabel,\n\tTagList,\n\ttype TagListProps,\n\tText,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nconst tagGroup = tv({\n\tslots: {\n\t\troot: \"flex flex-col gap-2 text-sm\",\n\t\tlist: \"flex flex-wrap gap-2\",\n\t\ttag: \"flex cursor-default items-center rounded-full border border-border px-2 py-1 outline-none ring-focus ring-offset-2 ring-offset-surface aria-selected:border-primary aria-selected:bg-primary aria-selected:text-primary-fg data-[focus-visible]:ring-2\",\n\t},\n});\n\nconst styles = tagGroup();\n\ninterface TagGroupProps<T>\n\textends Omit<AriaTagGroupProps, \"children\">,\n\t\tPick<TagListProps<T>, \"items\" | \"children\" | \"renderEmptyState\"> {\n\tlabel?: string;\n\tdescription?: string;\n\terrorMessage?: string;\n}\n\nconst TagGroup = <T extends object>({\n\tlabel,\n\tclassName,\n\tdescription,\n\terrorMessage,\n\titems,\n\tchildren,\n\trenderEmptyState,\n\t...props\n}: TagGroupProps<T>) => (\n\t<AriaTagGroup className={styles.root({ className })} {...props}>\n\t\t{label && <Label className=\"text-primary text-sm\">{label}</Label>}\n\t\t<TagList\n\t\t\tclassName={styles.list()}\n\t\t\titems={items}\n\t\t\trenderEmptyState={renderEmptyState}\n\t\t>\n\t\t\t{children}\n\t\t</TagList>\n\t\t{description && (\n\t\t\t<Text className=\"text-sm\" slot=\"description\">\n\t\t\t\t{description}\n\t\t\t</Text>\n\t\t)}\n\t\t{errorMessage && (\n\t\t\t<Text className=\"text-danger text-sm\" slot=\"errorMessage\">\n\t\t\t\t{errorMessage}\n\t\t\t</Text>\n\t\t)}\n\t</AriaTagGroup>\n);\n\nconst Tag = ({\n\tchildren,\n\tclassName,\n\t...props\n}: AriaTagProps & { className?: string }) => {\n\tconst textValue = typeof children === \"string\" ? children : undefined;\n\treturn (\n\t\t<AriaTag\n\t\t\tclassName={styles.tag({ className })}\n\t\t\ttextValue={textValue}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</AriaTag>\n\t);\n};\n\nexport { Tag, TagGroup };\n",
      "type": "registry:component"
    }
  ],
  "tailwind": {
    "config": {
      "content": [
        "./components/**/*.{ts,tsx}"
      ],
      "theme": {
        "extend": {}
      }
    }
  },
  "cssVars": {
    "theme": {
      "--color-surface": "var(--surface)",
      "--color-surface-2": "var(--surface-2)",
      "--color-fg": "var(--fg)",
      "--color-fg-muted": "var(--fg-muted)",
      "--color-fg-disabled": "var(--fg-disabled)",
      "--color-fg-inverse": "var(--fg-inverse)",
      "--color-border": "var(--border)",
      "--color-focus": "var(--focus)",
      "--color-primary": "var(--primary)",
      "--color-primary-fg": "var(--primary-fg)",
      "--color-secondary": "var(--secondary)",
      "--color-secondary-fg": "var(--secondary-fg)",
      "--color-danger": "var(--danger)",
      "--color-danger-fg": "var(--danger-fg)"
    },
    "light": {
      "--surface": "oklch(98.5% 0 0)",
      "--surface-2": "oklch(97% 0 0)",
      "--fg": "oklch(14.5% 0 0)",
      "--fg-muted": "oklch(55.6% 0 0)",
      "--fg-inverse": "oklch(98.5% 0 0)",
      "--fg-disabled": "oklch(70.8% 0 0)",
      "--border": "oklch(87% 0 0)",
      "--focus": "oklch(68.5% 0.169 237.323)",
      "--primary": "oklch(14.5% 0 0)",
      "--primary-fg": "oklch(98.5% 0 0)",
      "--secondary": "oklch(92.2% 0 0)",
      "--secondary-fg": "oklch(14.5% 0 0)",
      "--danger": "oklch(63.7% 0.237 25.331)",
      "--danger-fg": "#ffffff"
    },
    "dark": {
      "--surface": "oklch(14.5% 0 0)",
      "--surface-2": "oklch(20.5% 0 0)",
      "--fg": "oklch(98.5% 0.001 106.423)",
      "--fg-muted": "oklch(55.6% 0 0)",
      "--fg-inverse": "oklch(98.5% 0 0)",
      "--fg-disabled": "oklch(37.1% 0 0)",
      "--border": "oklch(37.1% 0 0)",
      "--focus": "oklch(68.5% 0.169 237.323)",
      "--primary": "oklch(98.5% 0 0)",
      "--primary-fg": "oklch(14.5% 0 0)",
      "--secondary": "oklch(26.9% 0 0)",
      "--secondary-fg": "oklch(98.5% 0 0)",
      "--danger": "oklch(63.7% 0.237 25.331)",
      "--danger-fg": "oklch(98.5% 0 0)"
    }
  },
  "css": {
    "@import \"tw-animate-css\"": {}
  },
  "meta": {
    "status": "stable",
    "tags": [
      "form",
      "interactive",
      "selection",
      "filtering"
    ]
  },
  "categories": [
    "forms"
  ]
}