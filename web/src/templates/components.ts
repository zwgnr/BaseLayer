export const components = [
  {
    framework: "React",
    name: "Accordion",
    files:
      'import { ChevronDown } from "lucide-react";\n\nimport {\n  AccordionContent,\n  AccordionItem,\n  Accordion as AccordionRoot,\n  AccordionTrigger,\n} from "@ark-ui/react";\n\nimport { accordion } from "@/potions/accordion";\n\nconst parts = [\n  {\n    trigger: "Is it Accessible?",\n    content: "Yes! All components adhere to WAI-ARIA design patterns.",\n  },\n  {\n    trigger: "Can I customize?",\n    content:\n      "The open component architecture allows for customization and customization.",\n  },\n  {\n    trigger: "Uncontrolled or Controlled?",\n    content:\n      "Components can be uncontrolled by default or controlled alternatively.",\n  },\n];\n\nexport const Accordion = () => {\n  const { root, item, trigger, content } = accordion();\n  return (\n    <AccordionRoot className={root()} defaultValue="Is it Accessible?">\n      {parts.map((part, id) => (\n        <AccordionItem className={item()} key={id} value={part.trigger}>\n          <AccordionTrigger className={trigger()}>\n            {part.trigger}\n            <ChevronDown className="h-5 w-5 transition duration-500" />\n          </AccordionTrigger>\n          <AccordionContent className={content()}>\n            <div className="mb-2">{part.content}</div>\n          </AccordionContent>\n        </AccordionItem>\n      ))}\n    </AccordionRoot>\n  );\n};',
  },
  {
    framework: "React",
    name: "avatar",
    files:
      'import { avatar } from "@/potions/avatar";\n\nimport {\n  AvatarFallback,\n  AvatarImage,\n  Avatar as AvatarRoot,\n} from "@ark-ui/react";\n\nexport const Avatar = () => (\n  <AvatarRoot className={avatar().root()}>\n    <AvatarFallback className={avatar().fallback()}>ME</AvatarFallback>\n    <AvatarImage\n      className={avatar().image()}\n      src="https://i.pravatar.cc/300"\n      alt="avatar"\n    />\n  </AvatarRoot>\n);\n',
  },
  {
    framework: "React",
    name: "badge",
    files:
      'import { badge } from "@/potions/badge";\n\n<span className={badge()}>Badge</span>;\n',
  },
  {
    framework: "React",
    name: "button-icon",
    files:
      'import { Button } from "@/components/button";\nimport { Heart } from "lucide-react";\n\n<Button>\n  <Heart className="mr-2" />\n  Icon Button\n</Button>;\n',
  },
  {
    framework: "React",
    name: "button-loader",
    files:
      'import { Button } from "@/components/button";\nimport { Loader } from "lucide-react";\n\n<Button disabled>\n  <Loader className="mr-2 h-4 w-4 animate-spin" />\n  Loading\n</Button>;\n',
  },
  {
    framework: "React",
    name: "button",
    files:
      'import { button } from "@/potions/button";\n\n<button className={button()}>Button</button>;',
  },
  {
    framework: "React",
    name: "carousel",
    files:
      'import {\n  CarouselControl,\n  CarouselNextSlideTrigger,\n  CarouselPrevSlideTrigger,\n  Carousel as CarouselRoot,\n  CarouselSlide,\n  CarouselSlideGroup,\n  CarouselViewport,\n} from "@ark-ui/react";\n\nconst { root, viewport, control } = carouselPotion();\n\nimport { carouselPotion } from "@/potions/carouselPotion";\nimport { ChevronLeftSquare, ChevronRightSquare } from "lucide-react";\n\nexport const Carousel = () => {\n  const images = [\n    "https://tinyurl.com/bdz4mty4",\n    "https://tinyurl.com/2wx9ymsr",\n    "https://tinyurl.com/4sjr5mvu",\n  ];\n  return (\n    <CarouselRoot className={root()}>\n      <CarouselViewport className={viewport()}>\n        <CarouselSlideGroup>\n          {images.map((image, index) => (\n            <CarouselSlide key={index} index={index}>\n              <img\n                src={image}\n                alt={`Slide Image ${index}`}\n                className="h-72 w-full object-cover"\n              />\n            </CarouselSlide>\n          ))}\n        </CarouselSlideGroup>\n        <CarouselControl className={control()}>\n          <CarouselPrevSlideTrigger asChild>\n            <button>\n              <ChevronLeftSquare\n                aria-label="Previous Slide"\n                className="h-8 w-8 text-white"\n              />\n            </button>\n          </CarouselPrevSlideTrigger>\n          <CarouselNextSlideTrigger asChild>\n            <button>\n              <ChevronRightSquare\n                aria-label="Next Slide"\n                className="h-8 w-8 text-white"\n              />\n            </button>\n          </CarouselNextSlideTrigger>\n        </CarouselControl>\n      </CarouselViewport>\n    </CarouselRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "checkbox",
    files:
      'import { Check, Minus } from "lucide-react";\n\nimport { CheckboxPotionProps, checkboxPotion } from "@/potions/checkboxPotion";\nimport {\n  CheckboxProps as ArkCheckboxProps,\n  CheckboxControl,\n  CheckboxInput,\n  CheckboxLabel,\n  Checkbox as CheckboxRoot,\n} from "@ark-ui/react";\nimport type { ReactNode } from "react";\n\ntype CheckboxProps = ArkCheckboxProps &\n  CheckboxPotionProps & {\n    children?: ReactNode;\n  };\n\nexport const Checkbox = ({ children, size }: CheckboxProps) => {\n  const cp = checkboxPotion({ size });\n  return (\n    <CheckboxRoot className={cp.root()}>\n      {(state) => (\n        <div className="flex flex-row items-center gap-2">\n          <CheckboxInput className="peer" />\n          <CheckboxControl className={cp.control()}>\n            {state.isChecked ? <Check /> : null}\n            {state.isIndeterminate ? <Minus /> : null}\n          </CheckboxControl>\n          {children ? (\n            <CheckboxLabel className={cp.label()}>{children}</CheckboxLabel>\n          ) : null}\n        </div>\n      )}\n    </CheckboxRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "ColorPicker",
    files:
      'import { colorPicker as cp } from "@/potions/colorPicker";\n\nimport {\n  ColorPickerArea,\n  ColorPickerAreaGradient,\n  ColorPickerAreaThumb,\n  ColorPickerChannelInput,\n  ColorPickerChannelSliderBackground,\n  ColorPickerChannelSliderThumb,\n  ColorPickerChannelSliderTrack,\n  ColorPickerContent,\n  ColorPickerEyeDropperTrigger,\n  ColorPicker as ColorPickerRoot,\n  ColorPickerSwatch,\n  ColorPickerSwatchBackground,\n  ColorPickerSwatchGroup,\n} from "@ark-ui/react";\nimport { Pipette } from "lucide-react";\n\nconst presets = [\n  "hsl(10, 81%, 59%)",\n  "hsl(60, 81%, 59%)",\n  "hsl(100, 81%, 59%)",\n  "hsl(175, 81%, 59%)",\n  "hsl(190, 81%, 59%)",\n  "hsl(205, 81%, 59%)",\n  "hsl(220, 81%, 59%)",\n  "hsl(250, 81%, 59%)",\n  "hsl(280, 81%, 59%)",\n  "hsl(350, 81%, 59%)",\n];\n\nexport const ColorPicker = () => {\n  return (\n    <ColorPickerRoot defaultValue="hsl(10, 81%, 59%)">\n      {(api) => {\n        const [hue, saturation, lightness] = api.channels;\n        return (\n          <ColorPickerContent className={cp().content()}>\n            <ColorPickerArea\n              className={cp().area()}\n              xChannel={saturation}\n              yChannel={lightness}\n            >\n              <ColorPickerAreaGradient className={cp().gradient()} />\n              <ColorPickerAreaThumb className={cp().areaThumb()} />\n            </ColorPickerArea>\n            <div className="flex w-full flex-row items-center gap-4 p-4">\n              <ColorPickerEyeDropperTrigger asChild>\n                <button>\n                  <Pipette className="text-text-4" />\n                </button>\n              </ColorPickerEyeDropperTrigger>\n              <div className="flex w-full flex-col gap-2">\n                <ColorPickerChannelSliderTrack\n                  className={cp().sliderTrack()}\n                  channel={hue}\n                >\n                  <ColorPickerChannelSliderBackground />\n                  <ColorPickerChannelSliderThumb\n                    className={cp().sliderThumb()}\n                  />\n                </ColorPickerChannelSliderTrack>\n                <ColorPickerChannelSliderTrack\n                  className={cp().sliderTrack()}\n                  channel="alpha"\n                >\n                  <ColorPickerChannelSliderBackground />\n                  <ColorPickerChannelSliderThumb\n                    className={cp().sliderThumb()}\n                  />\n                </ColorPickerChannelSliderTrack>\n              </div>\n            </div>\n            <div className="flex w-full items-center justify-center gap-2 p-4 ">\n              {api.channels.map((channel, index) => (\n                <ColorPickerChannelInput\n                  key={index}\n                  className={cp().input()}\n                  channel={channel}\n                />\n              ))}\n              <ColorPickerChannelInput\n                className={cp().input()}\n                channel="alpha"\n              />\n            </div>\n            <div className="p-4">\n              <p className="text-text-4">Presets</p>\n              <ColorPickerSwatchGroup className={cp().swatchGroup()}>\n                {presets.map((color) => (\n                  <ColorPickerSwatch\n                    className={cp().swatch()}\n                    key={color}\n                    value={color}\n                  >\n                    <ColorPickerSwatchBackground />\n                  </ColorPickerSwatch>\n                ))}\n              </ColorPickerSwatchGroup>\n            </div>\n          </ColorPickerContent>\n        );\n      }}\n    </ColorPickerRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "dialog",
    files:
      'import { buttonPotion } from "@/potions/button";\nimport { dialogPotion } from "@/potions/dialogPotion";\nimport {\n  Pressable as Button,\n  DialogBackdrop,\n  DialogCloseTrigger,\n  DialogContainer,\n  DialogContent,\n  DialogDescription,\n  Dialog as DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n  Portal,\n} from "@ark-ui/react";\nimport { X } from "lucide-react";\n\nconst { backdrop, container, content, description, title } = dialogPotion();\n\nexport const Dialog = () => {\n  return (\n    <DialogRoot>\n      <DialogTrigger asChild>\n        <Button className={buttonPotion({ intent: "accent" })}>\n          Open dialog\n        </Button>\n      </DialogTrigger>\n      <Portal>\n        <DialogBackdrop className={backdrop()} />\n        <DialogContainer className={container()}>\n          <DialogContent className={content()}>\n            <div className="flex flex-col gap-8 p-6">\n              <div className="flex flex-col gap-1">\n                <DialogTitle className={title()}>Dialog Title</DialogTitle>\n                <DialogDescription className={description()}>\n                  Dialog Description\n                </DialogDescription>\n              </div>\n              <div className="flex w-full items-center justify-center gap-3">\n                <DialogCloseTrigger asChild>\n                  <Button\n                    className={buttonPotion({\n                      state: "outline",\n                      className:\n                        "border-critical text-critical hover:bg-critical hover:text-black",\n                    })}\n                  >\n                    Cancel\n                  </Button>\n                </DialogCloseTrigger>\n                <Button className={buttonPotion()}>Confirm</Button>\n              </div>\n            </div>\n            <DialogCloseTrigger asChild>\n              <Button className="absolute right-6 top-6">\n                <X className="text-text" aria-label="Close dialog" />\n              </Button>\n            </DialogCloseTrigger>\n          </DialogContent>\n        </DialogContainer>\n      </Portal>\n    </DialogRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "DropdownMenu",
    files:
      'import { Avatar } from "@/components/avatar";\nimport { dropdownPotion } from "@/potions/dropdownPotion";\nimport {\n  MenuContent as DropdownContent,\n  MenuItem as DropdownItem,\n  MenuPositioner as DropdownPositioner,\n  Menu as DropdownRoot,\n  MenuSeparator as DropdownSeparator,\n  MenuTrigger as DropdownTrigger,\n  MenuTriggerItem as DropdownTriggerItem,\n  Portal,\n} from "@ark-ui/react";\nimport {\n  ChevronRight,\n  Cloud,\n  CreditCard,\n  HelpCircle,\n  LogOut,\n  Plus,\n  Settings,\n} from "lucide-react";\nimport { useState } from "react";\n\nconst dp = dropdownPotion();\n\nexport const DropdownMenu = () => {\n  const [value, setValue] = useState<Record<string, string | string[]>>({\n    theme: "",\n    features: [],\n  });\n  const options = [\n    { id: "light", label: "Light" },\n    { id: "dark", label: "Dark" },\n  ];\n  return (\n    <DropdownRoot\n      closeOnSelect={false}\n      onValueChange={(data) => {\n        setValue((prev) => ({\n          ...prev,\n          [data.name]: data.value,\n        }));\n      }}\n      value={value}\n    >\n      <DropdownTrigger asChild>\n        <button>\n          <Avatar />\n        </button>\n      </DropdownTrigger>\n      <Portal>\n        <DropdownPositioner className="z-50">\n          <DropdownContent className={dp.content()}>\n            <DropdownItem\n              className={dp.item({ className: "cursor-default" })}\n              disabled\n              id="new-tab"\n            >\n              <p className="text-gray-500">me@hey.com</p>\n            </DropdownItem>\n            <DropdownSeparator\n              className={dp.seperator({ className: "mb-2" })}\n            />\n            <DropdownItem className={dp.item()} id="profile">\n              <p>Account Settings</p>\n              <Settings className="h-5 w-5" />\n            </DropdownItem>\n            <DropdownItem className={dp.item()} id="projects">\n              <p>Billing</p>\n              <CreditCard className="h-5 w-5" />\n            </DropdownItem>\n            <DropdownSeparator\n              className={dp.seperator({ className: "my-2" })}\n            />\n            <DropdownItem className={dp.item()} id="team">\n              <p>Create a Team</p>\n              <Plus className="h-5 w-5" />\n            </DropdownItem>\n\n            <DropdownRoot\n              closeOnSelect={false}\n              positioning={{ placement: "right-start" }}\n            >\n              <DropdownTriggerItem className={dp.triggerItem()}>\n                <div className="flex w-full flex-1 items-center justify-between p-2 py-1.5">\n                  <p>Invite a member </p>\n                  <ChevronRight />\n                </div>\n              </DropdownTriggerItem>\n              <Portal>\n                <DropdownPositioner className="z-50">\n                  <DropdownContent className={dp.content()}>\n                    <DropdownItem className={dp.item()} id="twitter">\n                      Twitter\n                    </DropdownItem>\n                    <DropdownItem\n                      className={dp.item({ className: "mb-0" })}\n                      id="message"\n                    >\n                      Email\n                    </DropdownItem>\n                  </DropdownContent>\n                </DropdownPositioner>\n              </Portal>\n            </DropdownRoot>\n\n            <DropdownSeparator\n              className={dp.seperator({ className: "my-2" })}\n            />\n            <DropdownItem className={dp.item()} id="support">\n              <p>Support</p>\n              <HelpCircle className="h-5 w-5" />\n            </DropdownItem>\n            <DropdownItem className={dp.item()} id="api">\n              <p>Api</p>\n              <Cloud className="h-5 w-5" />\n            </DropdownItem>\n            <DropdownSeparator\n              className={dp.seperator({ className: "my-2" })}\n            />\n            <DropdownItem className={dp.item()} id="logout">\n              <p>Logout</p>\n              <LogOut className="h-5 w-5" />\n            </DropdownItem>\n          </DropdownContent>\n        </DropdownPositioner>\n      </Portal>\n    </DropdownRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "DropdownRadioGroup",
    files:
      'import { dropdownPotion } from "@/potions/dropdownPotion";\nimport { radioGroupPotion } from "@/potions/radioGroupPotion";\nimport {\n  MenuContent as DropdownContent,\n  MenuItemGroup as DropdownItemGroup,\n  MenuItemGroupLabel as DropdownItemGroupLabel,\n  MenuOptionItem as DropdownOptionItem,\n  MenuPositioner as DropdownPositioner,\n  Menu as DropdownRoot,\n  MenuSeparator as DropdownSeparator,\n  MenuTrigger as DropdownTrigger,\n  Portal,\n  Radio,\n  RadioControl,\n  RadioGroup,\n  RadioInput,\n  RadioLabel,\n} from "@ark-ui/react";\nimport { useState } from "react";\n\nconst dp = dropdownPotion();\nconst rgp = radioGroupPotion();\n\nexport const DropdownRadioGroup = () => {\n  const [value, setValue] = useState<Record<string, string | string[]>>({\n    theme: "",\n    features: [],\n  });\n  const options = [\n    { id: "light", label: "Light" },\n    { id: "dark", label: "Dark" },\n  ];\n  return (\n    <DropdownRoot\n      closeOnSelect={false}\n      onValueChange={(data) => {\n        setValue((prev) => ({\n          ...prev,\n          [data.name]: data.value,\n        }));\n      }}\n      value={value}\n    >\n      <DropdownTrigger asChild>\n        <button className="rounded-lg bg-surface-3 p-2">Theme</button>\n      </DropdownTrigger>\n      <Portal>\n        <DropdownPositioner className="z-50">\n          <DropdownContent className={dp.content()}>\n            <DropdownItemGroup id="radio-group" className="mb-2">\n              <DropdownItemGroupLabel\n                className={dp.itemGroupLabel()}\n                htmlFor="radio-group"\n              >\n                Theme\n              </DropdownItemGroupLabel>\n              <DropdownSeparator\n                className={dp.seperator({ className: "my-2" })}\n              />\n              <RadioGroup className={rgp.root()} defaultValue="light">\n                {options.map((option, id) => (\n                  <DropdownOptionItem\n                    className={dp.optionItem()}\n                    name="theme"\n                    type="radio"\n                    value={option.id}\n                    key={id}\n                  >\n                    <Radio className={rgp.radio()} value={option.id}>\n                      <RadioInput />\n                      <RadioControl className={rgp.control()} />\n                      <RadioLabel className={rgp.radioLabel()}>\n                        {option.label}\n                      </RadioLabel>\n                    </Radio>\n                  </DropdownOptionItem>\n                ))}\n              </RadioGroup>\n            </DropdownItemGroup>\n          </DropdownContent>\n        </DropdownPositioner>\n      </Portal>\n    </DropdownRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "dropdown",
    files:
      'import { dropdownPotion } from "@/potions/dropdownPotion";\nimport {\n  MenuContent as DropdownContent,\n  MenuItem as DropdownItem,\n  MenuPositioner as DropdownPositioner,\n  Menu as DropdownRoot,\n  MenuTrigger as DropdownTrigger,\n  Portal,\n} from "@ark-ui/react";\nimport { useState } from "react";\n\nconst dp = dropdownPotion();\n\nexport const Dropdown = () => {\n  const [value, setValue] = useState<Record<string, string | string[]>>({\n    theme: "",\n    features: [],\n  });\n  const options = [\n    { id: "light", label: "Light" },\n    { id: "dark", label: "Dark" },\n  ];\n  return (\n    <DropdownRoot\n      closeOnSelect={false}\n      onValueChange={(data) => {\n        setValue((prev) => ({\n          ...prev,\n          [data.name]: data.value,\n        }));\n      }}\n      value={value}\n    >\n      <DropdownTrigger asChild>\n        <button className="rounded-xl bg-surface-3 p-2">Dropdown</button>\n      </DropdownTrigger>\n      <Portal>\n        <DropdownPositioner className="z-50">\n          <DropdownContent className={dp.content()}>\n            <DropdownItem\n              className={dp.item({ className: "mt-2" })}\n              id="profile"\n            >\n              <p>Option 1</p>\n            </DropdownItem>\n            <DropdownItem className={dp.item()} id="projects">\n              <p>Option 2</p>\n            </DropdownItem>\n          </DropdownContent>\n        </DropdownPositioner>\n      </Portal>\n    </DropdownRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "HoverCard",
    files:
      'import { buttonPotion } from "@/potions/button";\nimport { hoverCardPotion } from "@/potions/hoverCardPotion";\nimport {\n  Pressable as Button,\n  HoverCardArrow,\n  HoverCardArrowTip,\n  HoverCardContent,\n  HoverCardPositioner,\n  HoverCard as HoverCardRoot,\n  HoverCardTrigger,\n  Portal,\n} from "@ark-ui/react";\n\nconst { positioner, content } = hoverCardPotion();\n\nexport const HoverCard = () => {\n  return (\n    <HoverCardRoot>\n      <HoverCardTrigger asChild>\n        <a href="" target="_blank" rel="noreferrer">\n          <img\n            className="h-24 w-24 rounded-lg object-cover"\n            src="https://tinyurl.com/2vscrc3v"\n          />\n        </a>\n      </HoverCardTrigger>\n      <Portal>\n        <HoverCardPositioner className={positioner()}>\n          <HoverCardContent className={content()}>\n            <HoverCardArrow>\n              <HoverCardArrowTip />\n            </HoverCardArrow>\n            <div className="flex w-full flex-col gap-4">\n              <div className="flex w-full justify-between">\n                <img\n                  className="h-16 w-16 rounded-xl object-cover"\n                  alt="Headphones"\n                  src="https://tinyurl.com/2vscrc3v"\n                />\n                <Button\n                  className={buttonPotion()}\n                  onClick={() => alert("Added to Cart!")}\n                >\n                  Add to Cart\n                </Button>\n              </div>\n\n              <div className="flex flex-col gap-2">\n                <h1 className="text-lg font-bold">\n                  Noise Canceling Headphones\n                </h1>\n                <h2 className="text-md">$299.99</h2>\n              </div>\n            </div>\n          </HoverCardContent>\n        </HoverCardPositioner>\n      </Portal>\n    </HoverCardRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "NumberInput",
    files:
      'import { numberInputPotion } from "@/potions/numberInputPotion";\nimport {\n  NumberInputControl,\n  NumberInputDecrementTrigger,\n  NumberInputField,\n  NumberInputIncrementTrigger,\n  NumberInput as NumberInputRoot,\n  NumberInputScrubber,\n} from "@ark-ui/react";\nimport { ChevronDown, ChevronUp } from "lucide-react";\n\nconst { root, control, field, decrementTrigger, incrementTrigger } =\n  numberInputPotion();\n\nexport const NumberInput = () => {\n  return (\n    <NumberInputRoot min={-50} max={50} defaultValue="42" className={root()}>\n      <NumberInputScrubber />\n      <NumberInputField className={field()} />\n      <NumberInputControl className={control()}>\n        <NumberInputIncrementTrigger className={incrementTrigger()}>\n          <ChevronUp />\n        </NumberInputIncrementTrigger>\n        <NumberInputDecrementTrigger className={decrementTrigger()}>\n          <ChevronDown />\n        </NumberInputDecrementTrigger>\n      </NumberInputControl>\n    </NumberInputRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "pagination",
    files:
      'import { buttonPotion } from "@/potions/button";\nimport {\n  PaginationEllipsis,\n  PaginationList,\n  PaginationNextPageTrigger,\n  PaginationPageTrigger,\n  PaginationPrevPageTrigger,\n  Pagination as PaginationRoot,\n  type PaginationProps,\n} from "@ark-ui/react";\n\nimport { paginationPotion } from "@/potions/paginationPotion";\n\nconst { root, list, pageTrigger, ellipsis } = paginationPotion();\n\nexport const Pagination = (props: Partial<PaginationProps>) => (\n  <PaginationRoot\n    count={5000}\n    pageSize={10}\n    siblingCount={2}\n    className={root()}\n    {...props}\n  >\n    {({ pages }) => (\n      <>\n        <PaginationList className={list()}>\n          <PaginationPrevPageTrigger asChild>\n            <button\n              className={buttonPotion({\n                className: "bg-surface-4 hover:bg-accent",\n              })}\n            >\n              Previous\n            </button>\n          </PaginationPrevPageTrigger>\n\n          {pages.map((page, index) =>\n            page.type === "page" ? (\n              <PaginationPageTrigger\n                className={pageTrigger()}\n                key={index}\n                {...page}\n                asChild\n              >\n                <button\n                  className={buttonPotion({\n                    className: "bg-surface-3 hover:bg-accent",\n                  })}\n                >\n                  {page.value}\n                </button>\n              </PaginationPageTrigger>\n            ) : (\n              <PaginationEllipsis\n                className={ellipsis()}\n                key={index}\n                index={index}\n              >\n                &#8230;\n              </PaginationEllipsis>\n            )\n          )}\n\n          <PaginationNextPageTrigger asChild>\n            <button className={buttonPotion({ intent: "accent" })}>Next</button>\n          </PaginationNextPageTrigger>\n        </PaginationList>\n      </>\n    )}\n  </PaginationRoot>\n);\n',
  },
  {
    framework: "React",
    name: "PinInput",
    files:
      'import { pinInputPotion } from "@/potions/pinInputPotion";\nimport {\n  PinInputControl,\n  PinInputField,\n  PinInputLabel,\n  PinInput as PinInputRoot,\n} from "@ark-ui/react";\n\nconst { root, field, control, label } = pinInputPotion();\n\nexport const PinInput = () => (\n  <PinInputRoot\n    className={root()}\n    placeholder="0"\n    onComplete={(e) => alert(e.valueAsString)}\n  >\n    <PinInputLabel className={label()}>Enter Pin:</PinInputLabel>\n    <PinInputControl className={control()}>\n      {[0, 1, 2, 3].map((id, index) => (\n        <PinInputField className={field()} key={id} index={index} />\n      ))}\n    </PinInputControl>\n  </PinInputRoot>\n);\n',
  },
  {
    framework: "React",
    name: "popover",
    files:
      'import { buttonPotion } from "@/potions/button";\nimport { popoverPotion } from "@/potions/popoverPotion";\nimport {\n  Pressable as Button,\n  PopoverCloseTrigger,\n  PopoverContent,\n  PopoverDescription,\n  PopoverPositioner,\n  Popover as PopoverRoot,\n  PopoverTitle,\n  PopoverTrigger,\n} from "@ark-ui/react";\nimport { Star } from "lucide-react";\n\nconst { positioner, content, title } = popoverPotion();\n\nexport const Popover = () => {\n  return (\n    <PopoverRoot>\n      <PopoverTrigger asChild>\n        <button className={buttonPotion({ className: "flex gap-2" })}>\n          <Star />\n          <p>Favorite</p>\n        </button>\n      </PopoverTrigger>\n      <PopoverPositioner className={positioner()}>\n        <PopoverContent className={content()}>\n          <div className="flex flex-col gap-4">\n            <div className="flex flex-col gap-2">\n              <PopoverTitle className={title()}>Favorite Lists</PopoverTitle>\n              <PopoverDescription className="text-sm">\n                Add to or create a new list!\n              </PopoverDescription>\n            </div>\n            <div className="flex gap-3">\n              <PopoverCloseTrigger asChild>\n                <Button\n                  className={buttonPotion({\n                    state: "outline",\n                    className: "border- bg-surface hover:bg-slate-200",\n                  })}\n                >\n                  Dismiss\n                </Button>\n              </PopoverCloseTrigger>\n              <Button className={buttonPotion()}>Save</Button>\n            </div>\n          </div>\n        </PopoverContent>\n      </PopoverPositioner>\n    </PopoverRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "RadioGroup",
    files:
      'import { radioGroupPotion } from "@/potions/radioGroupPotion";\nimport {\n  Radio,\n  RadioControl,\n  RadioGroup as RadioGroupRoot,\n  RadioInput,\n  RadioLabel,\n} from "@ark-ui/react";\n\nconst { root, control, radio, radioLabel } = radioGroupPotion();\n\nexport const RadioGroup = () => {\n  const options = [\n    { id: "mobile", label: "Mobile" },\n    { id: "web", label: "Web" },\n    { id: "Native", label: "Native" },\n  ];\n  return (\n    <RadioGroupRoot className={root()} defaultValue="mobile">\n      {options.map((option, id) => (\n        <Radio className={radio()} key={id} value={option.id}>\n          <RadioInput />\n          <RadioControl className={control()} />\n          <RadioLabel className={radioLabel()}>{option.label}</RadioLabel>\n        </Radio>\n      ))}\n    </RadioGroupRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "rangeSlider",
    files:
      'import {\n  RangeSliderControl,\n  RangeSliderMarker,\n  RangeSliderMarkerGroup,\n  RangeSliderRange,\n  RangeSlider as RangeSliderRoot,\n  RangeSliderThumb,\n  RangeSliderTrack,\n  type RangeSliderProps,\n} from "@ark-ui/react";\n\nimport { rangeSliderPotion } from "@/potions/rangeSliderPotion";\n\nconst rsp = rangeSliderPotion();\n\nexport const RangeSlider = (props: Partial<RangeSliderProps>) => {\n  const markers = [25, 50, 75];\n  const thumbs = [0, 1];\n\n  return (\n    <RangeSliderRoot\n      min={0}\n      max={100}\n      defaultValue={[10, 75]}\n      className={rsp.root()}\n      {...props}\n    >\n      <RangeSliderControl className={rsp.control()}>\n        <RangeSliderTrack className={rsp.track()}>\n          <RangeSliderRange className={rsp.range()} />\n        </RangeSliderTrack>\n        {thumbs.map((thumbIndex) => (\n          <RangeSliderThumb\n            key={thumbIndex}\n            className={rsp.thumb()}\n            index={thumbIndex}\n          />\n        ))}\n      </RangeSliderControl>\n      <RangeSliderMarkerGroup>\n        {markers.map((marker) => (\n          <RangeSliderMarker\n            key={marker}\n            className={rsp.marker()}\n            value={marker}\n          >\n            {marker}\n          </RangeSliderMarker>\n        ))}\n      </RangeSliderMarkerGroup>\n    </RangeSliderRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "RatingGroup",
    files:
      'import { ratingGroupPotion } from "@/potions/ratingGroupPotion";\nimport {\n  Rating,\n  RatingGroupControl,\n  RatingGroup as RatingGroupRoot,\n} from "@ark-ui/react";\nimport { Star } from "lucide-react";\n\nconst { control, rating, root } = ratingGroupPotion();\n\nexport const RatingGroup = () => {\n  return (\n    <RatingGroupRoot max={5} defaultValue={4} className={root()}>\n      <RatingGroupControl className={control()}>\n        {({ sizeArray }) =>\n          sizeArray.map((index) => (\n            <Rating className={rating()} key={index} index={index}>\n              {({ isHighlighted }) => {\n                return isHighlighted ? (\n                  <Star className="fill-accent text-accent" />\n                ) : (\n                  <Star className="stroke-surface-4" />\n                );\n              }}\n            </Rating>\n          ))\n        }\n      </RatingGroupControl>\n    </RatingGroupRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "select",
    files:
      'import { selectPotion } from "@/potions/selectPotion";\nimport {\n  Portal,\n  SelectContent,\n  SelectOption,\n  SelectPositioner,\n  Select as SelectRoot,\n  SelectTrigger,\n} from "@ark-ui/react";\nimport { ChevronDown } from "lucide-react";\n\nconst { trigger, content, option } = selectPotion();\n\nexport const Select = () => {\n  const SelectIcon = (props: { isOpen: boolean }) => {\n    const iconStyles = {\n      transform: props.isOpen ? "rotate(-180deg)" : undefined,\n      transition: "transform 0.2s",\n      transformOrigin: "center",\n    };\n    return <ChevronDown style={iconStyles} />;\n  };\n\n  return (\n    <SelectRoot>\n      {({ selectedOption, isOpen }) => (\n        <>\n          <SelectTrigger className={trigger()} asChild>\n            <button className="flex flex-row justify-between">\n              <span>{selectedOption?.label ?? "Select option"}</span>\n              <SelectIcon isOpen={isOpen} />\n            </button>\n          </SelectTrigger>\n          <Portal>\n            <SelectPositioner>\n              <SelectContent className={content()}>\n                <SelectOption\n                  className={option()}\n                  value="react"\n                  label="React"\n                />\n                <SelectOption className={option()} value="solid" label="Solid">\n                  Solid\n                </SelectOption>\n                <SelectOption className={option()} value="vue" label="Vue">\n                  Vue\n                </SelectOption>\n              </SelectContent>\n            </SelectPositioner>\n          </Portal>\n        </>\n      )}\n    </SelectRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "slider",
    files:
      'import { sliderPotion } from "@/potions/sliderPotion";\nimport {\n  SliderControl,\n  SliderMarker,\n  SliderMarkerGroup,\n  SliderRange,\n  Slider as SliderRoot,\n  SliderThumb,\n  SliderTrack,\n  type SliderProps,\n} from "@ark-ui/react";\n\nconst {\n  sliderControl,\n  sliderMarker,\n  sliderRange,\n  sliderRoot,\n  sliderThumb,\n  sliderTrack,\n} = sliderPotion();\n\nexport const Slider = (props: Partial<SliderProps>) => {\n  const markers = [25, 50, 75];\n  return (\n    <SliderRoot\n      min={0}\n      max={100}\n      defaultValue={33}\n      className={sliderRoot()}\n      {...props}\n    >\n      <SliderControl className={sliderControl()}>\n        <SliderTrack className={sliderTrack()}>\n          <SliderRange className={sliderRange()} />\n        </SliderTrack>\n        <SliderThumb className={sliderThumb()} />\n      </SliderControl>\n      <SliderMarkerGroup>\n        {markers.map((marker) => (\n          <SliderMarker key={marker} className={sliderMarker()} value={marker}>\n            {marker}\n          </SliderMarker>\n        ))}\n      </SliderMarkerGroup>\n    </SliderRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "splitter",
    files:
      'import { splitterPotion } from "@/potions/splitterPotion";\nimport {\n  SplitterPanel,\n  SplitterResizeTrigger,\n  Splitter as SplitterRoot,\n} from "@ark-ui/react";\n\nconst { panel, resizeTrigger, root } = splitterPotion();\n\nexport const Splitter = () => (\n  <SplitterRoot\n    orientation="horizontal"\n    className={root()}\n    defaultSize={[\n      { id: "a", size: 50 },\n      { id: "b", size: 50 },\n    ]}\n  >\n    <SplitterPanel className={panel()} id="a">\n      A\n    </SplitterPanel>\n    <SplitterResizeTrigger className={resizeTrigger()} id="a:b" />\n    <SplitterPanel className={panel()} id="b">\n      B\n    </SplitterPanel>\n  </SplitterRoot>\n);\n',
  },
  {
    framework: "React",
    name: "switch",
    files:
      'import {\n  Switch as ArkSwitch,\n  SwitchControl,\n  SwitchInput,\n  SwitchLabel,\n  SwitchThumb,\n  type SwitchProps as ArkSwitchProps,\n} from "@ark-ui/react";\n\nimport { switchPotion, type SwitchPotionProps } from "@/potions/switchPotion";\nimport type { ReactNode } from "react";\n\ntype SwitchProps = ArkSwitchProps &\n  SwitchPotionProps & {\n    children?: ReactNode;\n  };\n\nexport const Switch = ({ children, intent, size, ...props }: SwitchProps) => {\n  const { root, control, thumb, label } = switchPotion({\n    intent,\n    size,\n  });\n\n  return (\n    <ArkSwitch className={root()} {...props}>\n      <SwitchInput />\n      <SwitchControl className={control()}>\n        <SwitchThumb className={thumb()} />\n      </SwitchControl>\n      {children ? (\n        <SwitchLabel className={label()}>{children}</SwitchLabel>\n      ) : null}\n    </ArkSwitch>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "tabs",
    files:
      'import { tabsPotion } from "@/potions/tabsPotion";\nimport {\n  TabContent,\n  TabIndicator,\n  TabList,\n  TabTrigger,\n  Tabs as TabsRoot,\n} from "@ark-ui/react";\n\nconst { list, trigger, content, indicator } = tabsPotion();\n\nconst items = [\n  { value: "react", name: "React" },\n  { value: "solid", name: "Solid" },\n  { value: "vue", name: "Vue" },\n];\n\nexport const Tabs = () => (\n  <TabsRoot defaultValue={"react"}>\n    <TabList className={list()}>\n      {items.map((item, id) => (\n        <TabTrigger key={id} className={trigger()} value={item.value}>\n          {item.name}\n        </TabTrigger>\n      ))}\n      <TabIndicator className={indicator()} />\n    </TabList>\n    {items.map((item, id) => (\n      <TabContent key={id} className={content()} value={item.value}>\n        {item.name} Content\n      </TabContent>\n    ))}\n  </TabsRoot>\n);\n',
  },
  {
    framework: "React",
    name: "TagsInput",
    files:
      'import { tagsInputPotion } from "@/potions/tagsInputPotion";\nimport {\n  Tag,\n  TagDeleteTrigger,\n  TagInput,\n  TagsInputControl,\n  TagsInputField,\n  TagsInput as TagsInputRoot,\n} from "@ark-ui/react";\nimport { X } from "lucide-react";\nimport { Fragment } from "react";\n\nconst { root, control, field, tag, tagInput, deleteTrigger } =\n  tagsInputPotion();\n\nexport const TagsInput = () => {\n  return (\n    <TagsInputRoot className={root()} defaultValue={["React", "Solid", "Vue"]}>\n      {({ value }: { value: string[] }) => (\n        <TagsInputControl className={control()}>\n          {(value ?? []).map((value, index) => (\n            <Fragment key={index}>\n              <Tag className={tag()} index={index} value={value}>\n                {value}\n                <TagDeleteTrigger\n                  className={deleteTrigger()}\n                  index={index}\n                  value={value}\n                >\n                  <X />\n                </TagDeleteTrigger>\n              </Tag>\n              <TagInput className={tagInput()} index={index} value={value} />\n            </Fragment>\n          ))}\n          <TagsInputField className={field()} placeholder="Add tag" />\n        </TagsInputControl>\n      )}\n    </TagsInputRoot>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "toast",
    files:
      'import { ToastPotionProps, toastPotion } from "@/potions/toastPotion";\nimport {\n  Portal,\n  ToastCloseTrigger,\n  ToastDescription,\n  ToastGroup,\n  ToastPlacements,\n  ToastProvider,\n  Toast as ToastRoot,\n  ToastTitle,\n} from "@ark-ui/react";\nimport { X } from "lucide-react";\nimport type { ReactNode } from "react";\n\ninterface ToastProps extends ToastPotionProps {\n  children: ReactNode;\n}\n\nexport const Toast = ({ children, intent }: ToastProps) => {\n  const { root, group, title, description } = toastPotion({\n    intent,\n  });\n  return (\n    <ToastProvider>\n      <Portal>\n        <ToastPlacements>\n          {(placements) =>\n            placements.map((placement) => (\n              <ToastGroup\n                key={placement}\n                placement={placement}\n                className={group()}\n              >\n                {(toasts) =>\n                  toasts.map((toast) => (\n                    <ToastRoot\n                      className={root({ className: "w-72" })}\n                      key={toast.id}\n                      toast={toast}\n                    >\n                      <div className="flex flex-col gap-4">\n                        <div className="flex flex-col gap-1">\n                          <ToastTitle className={title()} />\n                          <ToastDescription className={description()} />\n                        </div>\n                        <div className="absolute right-0 top-0 p-4">\n                          <ToastCloseTrigger asChild>\n                            <button>\n                              <X />\n                            </button>\n                          </ToastCloseTrigger>\n                        </div>\n                      </div>\n                    </ToastRoot>\n                  ))\n                }\n              </ToastGroup>\n            ))\n          }\n        </ToastPlacements>\n      </Portal>\n      {children}\n    </ToastProvider>\n  );\n};\n',
  },
  {
    framework: "React",
    name: "tooltip",
    files:
      'import { tooltipPotion } from "@/potions/tooltipPotion";\nimport {\n  TooltipArrow,\n  TooltipArrowTip,\n  TooltipContent,\n  TooltipPositioner,\n  Tooltip as TooltipRoot,\n  TooltipTrigger,\n  type TooltipProps as ArkToolTipProps,\n} from "@ark-ui/react";\n\nexport type TooltipProps = Partial<ArkToolTipProps> & {\n  placement?: NonNullable<ArkToolTipProps["positioning"]>["placement"];\n};\nconst { positioner, content } = tooltipPotion();\n\nexport const Tooltip = (props: TooltipProps) => {\n  const { placement = "top", ...tooltipProps } = props;\n  return (\n    <TooltipRoot\n      openDelay={0}\n      closeDelay={200}\n      positioning={{ placement }}\n      {...tooltipProps}\n    >\n      <TooltipTrigger asChild>\n        <span>Hover me</span>\n      </TooltipTrigger>\n      <TooltipPositioner className={positioner()}>\n        <TooltipArrow>\n          <TooltipArrowTip />\n        </TooltipArrow>\n        <TooltipContent className={content()}>My Tooltip</TooltipContent>\n      </TooltipPositioner>\n    </TooltipRoot>\n  );\n};\n',
  },
  {
    framework: "Solid",
    name: "accordian",
    files:
      '/** @jsxImportSource solid-js */\nimport { ChevronDown } from "lucide-solid";\n\nimport { accordianPotion } from "@/potions/accordianPotion";\nimport {\n  AccordionContent,\n  AccordionItem,\n  Accordion as AccordionRoot,\n  AccordionTrigger,\n} from "@ark-ui/solid";\nimport { For } from "solid-js";\n\nconst { root, item, trigger, content } = accordianPotion();\n\nconst parts = [\n  {\n    trigger: "Is it Accessible?",\n    content: "Yep! All components adhere to WAI-ARIA design patterns.",\n  },\n  {\n    trigger: "Can I customize?",\n    content:\n      "The open component architecture allows for customization and customization.",\n  },\n  {\n    trigger: "Uncontrolled or Controlled?",\n    content:\n      "Components can be uncontrolled by default or controlled alternatively.",\n  },\n];\n\nexport const Accordian = () => {\n  return (\n    <div class="h-full w-full rounded-xl bg-slate-200 p-8">\n      <AccordionRoot class={root()}>\n        <For each={parts}>\n          {(part) => (\n            <AccordionItem class={item()} value={part.trigger}>\n              <AccordionTrigger class={trigger()}>\n                {part.trigger}\n                <ChevronDown class="h-5 w-5 transition duration-500" />\n              </AccordionTrigger>\n              <AccordionContent class={content()}>\n                <div class="mb-2">{part.content}</div>\n              </AccordionContent>\n            </AccordionItem>\n          )}\n        </For>\n      </AccordionRoot>\n    </div>\n  );\n};\n',
  },
];
