export const components = [
  {
    "name": "Badge",
    "files": "import { Badge } from \"@/components/base/badge\";\n\nexport const BadgeExample = () => <Badge>Badge</Badge>;\n"
  },
  {
    "name": "Button",
    "files": "import { Button } from \"@/components/base/button\";\n\n<Button>Button</Button>;\n"
  },
  {
    "name": "ButtonIcon",
    "files": "import { Button } from \"@/components/button\";\nimport { Heart } from \"lucide-react\";\n\n<Button>\n  <Heart className=\"mr-2\" />\n  Icon Button\n</Button>;\n"
  },
  {
    "name": "ButtonLoader",
    "files": "import { Button } from \"@/components/button\";\nimport { Loader } from \"lucide-react\";\n\n<Button disabled>\n  <Loader className=\"mr-2 h-4 w-4 animate-spin\" />\n  Loading\n</Button>;\n"
  },
  {
    "name": "Dialog",
    "files": "import { Button } from \"@/components/base/button\";\nimport {\n  DialogContent,\n  DialogModal,\n  DialogTrigger,\n} from \"@/components/base/dialog\";\nimport { Check } from \"lucide-react\";\nimport { Heading } from \"react-aria-components\";\n\nexport const Dialog = () => {\n  return (\n    <DialogTrigger>\n      <Button>Checkout</Button>\n      <DialogModal>\n        <DialogContent>\n          {({ close }) => (\n            <>\n              <Check className=\"h-8 w-8 text-green-500\" />\n              <Heading className=\"text-lg font-bold\">\n                Payment Successfull\n              </Heading>\n              <p className=\"text-sm text-fg-3\">\n                Your order has been placed. Check your email for order details!\n              </p>\n              <Button intent=\"secondary\" onPress={close}>\n                Back to Dashboard\n              </Button>\n            </>\n          )}\n        </DialogContent>\n      </DialogModal>\n    </DialogTrigger>\n  );\n};\n"
  },
  {
    "name": "ListBox",
    "files": "import { ListBox, ListBoxItem } from \"@/components/base/listBox\";\n\nexport const ListBoxExample = () => {\n  return (\n    <ListBox aria-label=\"Ice cream flavors\" selectionMode=\"multiple\">\n      <ListBoxItem>Chocolate</ListBoxItem>\n      <ListBoxItem>Mint</ListBoxItem>\n      <ListBoxItem>Strawberry</ListBoxItem>\n      <ListBoxItem>Vanilla</ListBoxItem>\n    </ListBox>\n  );\n};\n"
  },
  {
    "name": "ListBoxReorderable",
    "files": "import { ListBox, ListBoxItem } from \"@/components/base/listBox\";\nimport { useDragAndDrop } from \"react-aria-components\";\nimport { useListData } from \"react-stately\";\n\nexport const ListBoxReorderable = () => {\n  let list = useListData({\n    initialItems: [\n      { id: 1, name: \"Adobe Photoshop\" },\n      { id: 2, name: \"Adobe XD\" },\n      { id: 3, name: \"Adobe Dreamweaver\" },\n      { id: 4, name: \"Adobe InDesign\" },\n      { id: 5, name: \"Adobe Connect\" },\n    ],\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => ({ \"text/plain\": list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === \"before\") {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === \"after\") {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n  });\n\n  return (\n    <ListBox\n      aria-label=\"Reorderable list\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item: any) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n};\n"
  },
  {
    "name": "Menu",
    "files": "import { Button } from \"@/components/base/button\";\n\nimport {\n  MenuConent,\n  MenuHeader,\n  MenuItem,\n  MenuSeperator,\n  MenuTrigger,\n  Section,\n} from \"@/components/base/menu\";\n\nimport {\n  CreditCard,\n  HelpCircle,\n  LogOut,\n  Plus,\n  Settings,\n  User,\n} from \"lucide-react\";\n\nexport const Menu = () => {\n  return (\n    <MenuTrigger>\n      <Button className=\"h-full rounded-full p-4 text-xl\" state=\"outline\">\n        Me\n      </Button>\n      <MenuConent>\n        <Section>\n          <MenuHeader className=\"text-fg-4\">me@hello.com</MenuHeader>\n        </Section>\n        <MenuSeperator className=\"mt-0\" />\n        <MenuItem>\n          Account Settings\n          <Settings />\n        </MenuItem>\n        <MenuItem>\n          Billing\n          <CreditCard />\n        </MenuItem>\n        <MenuSeperator />\n        <MenuItem>\n          Create a Team\n          <Plus />\n        </MenuItem>\n        <MenuItem>\n          Invite Member\n          <User />\n        </MenuItem>\n        <MenuSeperator />\n        <MenuItem>\n          Support\n          <HelpCircle />\n        </MenuItem>\n        <MenuSeperator />\n        <MenuItem>\n          Logout\n          <LogOut />\n        </MenuItem>\n      </MenuConent>\n    </MenuTrigger>\n  );\n};\n"
  },
  {
    "name": "MenuSimple",
    "files": "import { Button } from \"@/components/base/button\";\nimport { MenuConent, MenuItem, MenuTrigger } from \"@/components/base/menu\";\n\nexport const MenuSimple = () => {\n  return (\n    <MenuTrigger>\n      <Button intent=\"secondary\">Edit</Button>\n      <MenuConent>\n        <MenuItem>Cut</MenuItem>\n        <MenuItem>Copy</MenuItem>\n        <MenuItem>Paste</MenuItem>\n      </MenuConent>\n    </MenuTrigger>\n  );\n};\n"
  },
  {
    "name": "carousel",
    "files": "import {\n  CarouselControl,\n  CarouselNextSlideTrigger,\n  CarouselPrevSlideTrigger,\n  Carousel as CarouselRoot,\n  CarouselSlide,\n  CarouselSlideGroup,\n  CarouselViewport,\n} from \"@ark-ui/react\";\n\nconst { root, viewport, control } = carouselPotion();\n\nimport { carouselPotion } from \"@/components/base/carouselPotion\";\nimport { ChevronLeftSquare, ChevronRightSquare } from \"lucide-react\";\n\nexport const Carousel = () => {\n  const images = [\n    \"https://tinyurl.com/bdz4mty4\",\n    \"https://tinyurl.com/2wx9ymsr\",\n    \"https://tinyurl.com/4sjr5mvu\",\n  ];\n  return (\n    <CarouselRoot className={root()}>\n      <CarouselViewport className={viewport()}>\n        <CarouselSlideGroup>\n          {images.map((image, index) => (\n            <CarouselSlide key={index} index={index}>\n              <img\n                src={image}\n                alt={`Slide Image ${index}`}\n                className=\"h-72 w-full object-cover\"\n              />\n            </CarouselSlide>\n          ))}\n        </CarouselSlideGroup>\n        <CarouselControl className={control()}>\n          <CarouselPrevSlideTrigger asChild>\n            <button>\n              <ChevronLeftSquare\n                aria-label=\"Previous Slide\"\n                className=\"h-8 w-8 text-white\"\n              />\n            </button>\n          </CarouselPrevSlideTrigger>\n          <CarouselNextSlideTrigger asChild>\n            <button>\n              <ChevronRightSquare\n                aria-label=\"Next Slide\"\n                className=\"h-8 w-8 text-white\"\n              />\n            </button>\n          </CarouselNextSlideTrigger>\n        </CarouselControl>\n      </CarouselViewport>\n    </CarouselRoot>\n  );\n};\n"
  },
  {
    "name": "checkbox",
    "files": "import { checkbox, type CheckboxPotionProps } from \"@/components/base/checkbox\";\nimport { Check } from \"lucide-react\";\n\nimport {\n  Checkbox as AriaCheckbox,\n  CheckboxProps as AriaCheckBoxProps,\n} from \"react-aria-components\";\n\ninterface CheckBoxProps extends AriaCheckBoxProps, CheckboxPotionProps {\n  className?: string | undefined;\n}\n\nexport const Checkbox = ({ size, className, children }: CheckBoxProps) => {\n  const { box, root } = checkbox({ size });\n  return (\n    <AriaCheckbox className={root()}>\n      {({ isSelected }) => (\n        <>\n          <div className={box({ className })}>{isSelected && <Check />}</div>\n          {children}\n        </>\n      )}\n    </AriaCheckbox>\n  );\n};\n"
  },
  {
    "name": "ColorPicker",
    "files": "import { colorPicker, colorPicker as cp } from \"@/components/base/colorPicker\";\n\nimport {\n  ColorPickerArea,\n  ColorPickerAreaGradient,\n  ColorPickerAreaThumb,\n  ColorPickerChannelInput,\n  ColorPickerChannelSliderBackground,\n  ColorPickerChannelSliderThumb,\n  ColorPickerChannelSliderTrack,\n  ColorPickerContent,\n  ColorPickerEyeDropperTrigger,\n  ColorPicker as ColorPickerRoot,\n  ColorPickerSwatch,\n  ColorPickerSwatchBackground,\n  ColorPickerSwatchGroup,\n} from \"@ark-ui/react\";\nimport { Pipette } from \"lucide-react\";\n\nconst presets = [\n  \"hsl(10, 81%, 59%)\",\n  \"hsl(60, 81%, 59%)\",\n  \"hsl(100, 81%, 59%)\",\n  \"hsl(175, 81%, 59%)\",\n  \"hsl(190, 81%, 59%)\",\n  \"hsl(205, 81%, 59%)\",\n  \"hsl(220, 81%, 59%)\",\n  \"hsl(250, 81%, 59%)\",\n  \"hsl(280, 81%, 59%)\",\n  \"hsl(350, 81%, 59%)\",\n];\n\nconst { content, area, areaThumb, gradient, sliderTrack, sliderThumb } =\n  colorPicker();\n\nexport const ColorPicker = () => {\n  return (\n    <ColorPickerRoot defaultValue=\"hsl(10, 81%, 59%)\">\n      {(api) => {\n        const [hue, saturation, lightness] = api.channels;\n        return (\n          <ColorPickerContent className={content()}>\n            <ColorPickerArea\n              className={area()}\n              xChannel={saturation}\n              yChannel={lightness}\n            >\n              <ColorPickerAreaGradient className={gradient()} />\n              <ColorPickerAreaThumb className={areaThumb()} />\n            </ColorPickerArea>\n            <div className=\"flex w-full flex-row items-center gap-4 p-4\">\n              <ColorPickerEyeDropperTrigger asChild>\n                <button>\n                  <Pipette className=\"text-fg-4\" />\n                </button>\n              </ColorPickerEyeDropperTrigger>\n              <div className=\"flex w-full flex-col gap-2\">\n                <ColorPickerChannelSliderTrack\n                  className={sliderTrack()}\n                  channel={hue}\n                >\n                  <ColorPickerChannelSliderBackground />\n                  <ColorPickerChannelSliderThumb className={sliderThumb()} />\n                </ColorPickerChannelSliderTrack>\n                <ColorPickerChannelSliderTrack\n                  className={sliderTrack()}\n                  channel=\"alpha\"\n                >\n                  <ColorPickerChannelSliderBackground />\n                  <ColorPickerChannelSliderThumb className={sliderThumb()} />\n                </ColorPickerChannelSliderTrack>\n              </div>\n            </div>\n            <div className=\"flex w-full items-center justify-center gap-2 p-4 \">\n              {api.channels.map((channel, index) => (\n                <ColorPickerChannelInput\n                  key={index}\n                  className={cp().input()}\n                  channel={channel}\n                />\n              ))}\n              <ColorPickerChannelInput\n                className={cp().input()}\n                channel=\"alpha\"\n              />\n            </div>\n            <div className=\"p-4\">\n              <p className=\"text-fg-4\">Presets</p>\n              <ColorPickerSwatchGroup className={cp().swatchGroup()}>\n                {presets.map((color) => (\n                  <ColorPickerSwatch\n                    className={cp().swatch()}\n                    key={color}\n                    value={color}\n                  >\n                    <ColorPickerSwatchBackground />\n                  </ColorPickerSwatch>\n                ))}\n              </ColorPickerSwatchGroup>\n            </div>\n          </ColorPickerContent>\n        );\n      }}\n    </ColorPickerRoot>\n  );\n};\n"
  },
  {
    "name": "HoverCard",
    "files": "import { button } from \"@/components/base/button\";\nimport { hoverCardPotion } from \"@/components/base/hoverCardPotion\";\nimport {\n  Pressable as Button,\n  HoverCardArrow,\n  HoverCardArrowTip,\n  HoverCardContent,\n  HoverCardPositioner,\n  HoverCard as HoverCardRoot,\n  HoverCardTrigger,\n  Portal,\n} from \"@ark-ui/react\";\n\nconst { positioner, content } = hoverCardPotion();\n\nexport const HoverCard = () => {\n  return (\n    <HoverCardRoot>\n      <HoverCardTrigger asChild>\n        <a href=\"\" target=\"_blank\" rel=\"noreferrer\">\n          <img\n            className=\"h-24 w-24 rounded-lg object-cover\"\n            src=\"https://tinyurl.com/2vscrc3v\"\n          />\n        </a>\n      </HoverCardTrigger>\n      <Portal>\n        <HoverCardPositioner className={positioner()}>\n          <HoverCardContent className={content()}>\n            <HoverCardArrow>\n              <HoverCardArrowTip />\n            </HoverCardArrow>\n            <div className=\"flex w-full flex-col gap-4\">\n              <div className=\"flex w-full justify-between\">\n                <img\n                  className=\"h-16 w-16 rounded-xl object-cover\"\n                  alt=\"Headphones\"\n                  src=\"https://tinyurl.com/2vscrc3v\"\n                />\n                <Button\n                  className={button()}\n                  onClick={() => alert(\"Added to Cart!\")}\n                >\n                  Add to Cart\n                </Button>\n              </div>\n\n              <div className=\"flex flex-col gap-2\">\n                <h1 className=\"text-lg font-bold\">\n                  Noise Canceling Headphones\n                </h1>\n                <h2 className=\"text-md\">$299.99</h2>\n              </div>\n            </div>\n          </HoverCardContent>\n        </HoverCardPositioner>\n      </Portal>\n    </HoverCardRoot>\n  );\n};\n"
  },
  {
    "name": "NumberInput",
    "files": "import { numberInputPotion } from \"@/components/base/numberInputPotion\";\nimport {\n  NumberInputControl,\n  NumberInputDecrementTrigger,\n  NumberInputField,\n  NumberInputIncrementTrigger,\n  NumberInput as NumberInputRoot,\n  NumberInputScrubber,\n} from \"@ark-ui/react\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\n\nconst { root, control, field, decrementTrigger, incrementTrigger } =\n  numberInputPotion();\n\nexport const NumberInput = () => {\n  return (\n    <NumberInputRoot min={-50} max={50} defaultValue=\"42\" className={root()}>\n      <NumberInputScrubber />\n      <NumberInputField className={field()} />\n      <NumberInputControl className={control()}>\n        <NumberInputIncrementTrigger className={incrementTrigger()}>\n          <ChevronUp />\n        </NumberInputIncrementTrigger>\n        <NumberInputDecrementTrigger className={decrementTrigger()}>\n          <ChevronDown />\n        </NumberInputDecrementTrigger>\n      </NumberInputControl>\n    </NumberInputRoot>\n  );\n};\n"
  },
  {
    "name": "pagination",
    "files": "import { button } from \"@/components/base/button\";\nimport {\n  PaginationEllipsis,\n  PaginationList,\n  PaginationNextPageTrigger,\n  PaginationPageTrigger,\n  PaginationPrevPageTrigger,\n  Pagination as PaginationRoot,\n  type PaginationProps,\n} from \"@ark-ui/react\";\n\nimport { paginationPotion } from \"@/components/base/paginationPotion\";\n\nconst { root, list, pageTrigger, ellipsis } = paginationPotion();\n\nexport const Pagination = (props: Partial<PaginationProps>) => (\n  <PaginationRoot\n    count={5000}\n    pageSize={10}\n    siblingCount={2}\n    className={root()}\n    {...props}\n  >\n    {({ pages }) => (\n      <>\n        <PaginationList className={list()}>\n          <PaginationPrevPageTrigger asChild>\n            <button\n              className={button({\n                className: \"bg-surface-4 hover:bg-secondary\",\n              })}\n            >\n              Previous\n            </button>\n          </PaginationPrevPageTrigger>\n\n          {pages.map((page, index) =>\n            page.type === \"page\" ? (\n              <PaginationPageTrigger\n                className={pageTrigger()}\n                key={index}\n                {...page}\n                asChild\n              >\n                <button\n                  className={button({\n                    className: \"bg-surface-3 hover:bg-secondary\",\n                  })}\n                >\n                  {page.value}\n                </button>\n              </PaginationPageTrigger>\n            ) : (\n              <PaginationEllipsis\n                className={ellipsis()}\n                key={index}\n                index={index}\n              >\n                &#8230;\n              </PaginationEllipsis>\n            ),\n          )}\n\n          <PaginationNextPageTrigger asChild>\n            <button className={button({ intent: \"secondary\" })}>Next</button>\n          </PaginationNextPageTrigger>\n        </PaginationList>\n      </>\n    )}\n  </PaginationRoot>\n);\n"
  },
  {
    "name": "PinInput",
    "files": "import { pinInputPotion } from \"@/components/base/pinInputPotion\";\nimport {\n  PinInputControl,\n  PinInputField,\n  PinInputLabel,\n  PinInput as PinInputRoot,\n} from \"@ark-ui/react\";\n\nconst { root, field, control, label } = pinInputPotion();\n\nexport const PinInput = () => (\n  <PinInputRoot\n    className={root()}\n    placeholder=\"0\"\n    onComplete={(e) => alert(e.valueAsString)}\n  >\n    <PinInputLabel className={label()}>Enter Pin:</PinInputLabel>\n    <PinInputControl className={control()}>\n      {[0, 1, 2, 3].map((id, index) => (\n        <PinInputField className={field()} key={id} index={index} />\n      ))}\n    </PinInputControl>\n  </PinInputRoot>\n);\n"
  },
  {
    "name": "popover",
    "files": "import { button } from \"@/components/base/button\";\nimport { popoverPotion } from \"@/components/base/popoverPotion\";\nimport {\n  Pressable as Button,\n  PopoverCloseTrigger,\n  PopoverContent,\n  PopoverDescription,\n  PopoverPositioner,\n  Popover as PopoverRoot,\n  PopoverTitle,\n  PopoverTrigger,\n} from \"@ark-ui/react\";\nimport { Star } from \"lucide-react\";\n\nconst { positioner, content, title } = popoverPotion();\n\nexport const Popover = () => {\n  return (\n    <PopoverRoot>\n      <PopoverTrigger asChild>\n        <button className={button({ className: \"flex gap-2\" })}>\n          <Star />\n          <p>Favorite</p>\n        </button>\n      </PopoverTrigger>\n      <PopoverPositioner className={positioner()}>\n        <PopoverContent className={content()}>\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"flex flex-col gap-2\">\n              <PopoverTitle className={title()}>Favorite Lists</PopoverTitle>\n              <PopoverDescription className=\"text-sm\">\n                Add to or create a new list!\n              </PopoverDescription>\n            </div>\n            <div className=\"flex gap-3\">\n              <PopoverCloseTrigger asChild>\n                <Button\n                  className={button({\n                    state: \"outline\",\n                    className: \"border- bg-surface hover:bg-slate-200\",\n                  })}\n                >\n                  Dismiss\n                </Button>\n              </PopoverCloseTrigger>\n              <Button className={button()}>Save</Button>\n            </div>\n          </div>\n        </PopoverContent>\n      </PopoverPositioner>\n    </PopoverRoot>\n  );\n};\n"
  },
  {
    "name": "RadioGroup",
    "files": "import { radioGroupPotion } from \"@/components/base/radioGroupPotion\";\nimport {\n  Radio,\n  RadioControl,\n  RadioGroup as RadioGroupRoot,\n  RadioInput,\n  RadioLabel,\n} from \"@ark-ui/react\";\n\nconst { root, control, radio, radioLabel } = radioGroupPotion();\n\nexport const RadioGroup = () => {\n  const options = [\n    { id: \"mobile\", label: \"Mobile\" },\n    { id: \"web\", label: \"Web\" },\n    { id: \"Native\", label: \"Native\" },\n  ];\n  return (\n    <RadioGroupRoot className={root()} defaultValue=\"mobile\">\n      {options.map((option, id) => (\n        <Radio className={radio()} key={id} value={option.id}>\n          <RadioInput />\n          <RadioControl className={control()} />\n          <RadioLabel className={radioLabel()}>{option.label}</RadioLabel>\n        </Radio>\n      ))}\n    </RadioGroupRoot>\n  );\n};\n"
  },
  {
    "name": "rangeSlider",
    "files": "import {\n  RangeSliderControl,\n  RangeSliderMarker,\n  RangeSliderMarkerGroup,\n  RangeSliderRange,\n  RangeSlider as RangeSliderRoot,\n  RangeSliderThumb,\n  RangeSliderTrack,\n  type RangeSliderProps,\n} from \"@ark-ui/react\";\n\nimport { rangeSliderPotion } from \"@/components/base/rangeSliderPotion\";\n\nconst rsp = rangeSliderPotion();\n\nexport const RangeSlider = (props: Partial<RangeSliderProps>) => {\n  const markers = [25, 50, 75];\n  const thumbs = [0, 1];\n\n  return (\n    <RangeSliderRoot\n      min={0}\n      max={100}\n      defaultValue={[10, 75]}\n      className={rsp.root()}\n      {...props}\n    >\n      <RangeSliderControl className={rsp.control()}>\n        <RangeSliderTrack className={rsp.track()}>\n          <RangeSliderRange className={rsp.range()} />\n        </RangeSliderTrack>\n        {thumbs.map((thumbIndex) => (\n          <RangeSliderThumb\n            key={thumbIndex}\n            className={rsp.thumb()}\n            index={thumbIndex}\n          />\n        ))}\n      </RangeSliderControl>\n      <RangeSliderMarkerGroup>\n        {markers.map((marker) => (\n          <RangeSliderMarker\n            key={marker}\n            className={rsp.marker()}\n            value={marker}\n          >\n            {marker}\n          </RangeSliderMarker>\n        ))}\n      </RangeSliderMarkerGroup>\n    </RangeSliderRoot>\n  );\n};\n"
  },
  {
    "name": "RatingGroup",
    "files": "import { ratingGroupPotion } from \"@/components/base/ratingGroupPotion\";\nimport {\n  Rating,\n  RatingGroupControl,\n  RatingGroup as RatingGroupRoot,\n} from \"@ark-ui/react\";\nimport { Star } from \"lucide-react\";\n\nconst { control, rating, root } = ratingGroupPotion();\n\nexport const RatingGroup = () => {\n  return (\n    <RatingGroupRoot max={5} defaultValue={4} className={root()}>\n      <RatingGroupControl className={control()}>\n        {({ sizeArray }) =>\n          sizeArray.map((index) => (\n            <Rating className={rating()} key={index} index={index}>\n              {({ isHighlighted }) => {\n                return isHighlighted ? (\n                  <Star className=\"fill-secondary text-secondary\" />\n                ) : (\n                  <Star className=\"stroke-surface-4\" />\n                );\n              }}\n            </Rating>\n          ))\n        }\n      </RatingGroupControl>\n    </RatingGroupRoot>\n  );\n};\n"
  },
  {
    "name": "select",
    "files": "import { selectPotion } from \"@/components/base/selectPotion\";\nimport {\n  Portal,\n  SelectContent,\n  SelectOption,\n  SelectPositioner,\n  Select as SelectRoot,\n  SelectTrigger,\n} from \"@ark-ui/react\";\nimport { ChevronDown } from \"lucide-react\";\n\nconst { trigger, content, option } = selectPotion();\n\nexport const Select = () => {\n  const SelectIcon = (props: { isOpen: boolean }) => {\n    const iconStyles = {\n      transform: props.isOpen ? \"rotate(-180deg)\" : undefined,\n      transition: \"transform 0.2s\",\n      transformOrigin: \"center\",\n    };\n    return <ChevronDown style={iconStyles} />;\n  };\n\n  return (\n    <SelectRoot>\n      {({ selectedOption, isOpen }) => (\n        <>\n          <SelectTrigger className={trigger()} asChild>\n            <button className=\"flex flex-row justify-between\">\n              <span>{selectedOption?.label ?? \"Select option\"}</span>\n              <SelectIcon isOpen={isOpen} />\n            </button>\n          </SelectTrigger>\n          <Portal>\n            <SelectPositioner>\n              <SelectContent className={content()}>\n                <SelectOption\n                  className={option()}\n                  value=\"react\"\n                  label=\"React\"\n                />\n                <SelectOption className={option()} value=\"solid\" label=\"Solid\">\n                  Solid\n                </SelectOption>\n                <SelectOption className={option()} value=\"vue\" label=\"Vue\">\n                  Vue\n                </SelectOption>\n              </SelectContent>\n            </SelectPositioner>\n          </Portal>\n        </>\n      )}\n    </SelectRoot>\n  );\n};\n"
  },
  {
    "name": "Tabs",
    "files": "import { Tab, TabList, TabPanel, TabsRoot } from \"@/components/base/tabs\";\n\nconst items = [\n  { value: \"react\", name: \"React\" },\n  { value: \"solid\", name: \"Solid\" },\n  { value: \"vue\", name: \"Vue\" },\n];\n\nexport const Tabs = () => (\n  <TabsRoot>\n    <TabList aria-label=\"Dashbord Panels\">\n      <Tab id=\"FoR\">Overview</Tab>\n      <Tab id=\"MaR\">Activity</Tab>\n      <Tab id=\"Emp\">Usage</Tab>\n    </TabList>\n    <TabPanel id=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab\n      oris.fffffffffffffffffffffffffffffffffffff\n    </TabPanel>\n    <TabPanel id=\"MaR\">Senatus Populusque Romanus.</TabPanel>\n    <TabPanel id=\"Emp\">Alea jacta est.</TabPanel>\n  </TabsRoot>\n);\n"
  },
  {
    "name": "TagsInput",
    "files": "import { tagsInputPotion } from \"@/components/base/tagsInputPotion\";\nimport {\n  Tag,\n  TagDeleteTrigger,\n  TagInput,\n  TagsInputControl,\n  TagsInputField,\n  TagsInput as TagsInputRoot,\n} from \"@ark-ui/react\";\nimport { X } from \"lucide-react\";\nimport { Fragment } from \"react\";\n\nconst { root, control, field, tag, tagInput, deleteTrigger } =\n  tagsInputPotion();\n\nexport const TagsInput = () => {\n  return (\n    <TagsInputRoot className={root()} defaultValue={[\"React\", \"Solid\", \"Vue\"]}>\n      {({ value }: { value: string[] }) => (\n        <TagsInputControl className={control()}>\n          {(value ?? []).map((value, index) => (\n            <Fragment key={index}>\n              <Tag className={tag()} index={index} value={value}>\n                {value}\n                <TagDeleteTrigger\n                  className={deleteTrigger()}\n                  index={index}\n                  value={value}\n                >\n                  <X />\n                </TagDeleteTrigger>\n              </Tag>\n              <TagInput className={tagInput()} index={index} value={value} />\n            </Fragment>\n          ))}\n          <TagsInputField className={field()} placeholder=\"Add tag\" />\n        </TagsInputControl>\n      )}\n    </TagsInputRoot>\n  );\n};\n"
  },
  {
    "name": "toast",
    "files": "import { ToastPotionProps, toastPotion } from \"@/components/base/toastPotion\";\nimport {\n  Portal,\n  ToastCloseTrigger,\n  ToastDescription,\n  ToastGroup,\n  ToastPlacements,\n  ToastProvider,\n  Toast as ToastRoot,\n  ToastTitle,\n} from \"@ark-ui/react\";\nimport { X } from \"lucide-react\";\nimport type { ReactNode } from \"react\";\n\ninterface ToastProps extends ToastPotionProps {\n  children: ReactNode;\n}\n\nexport const Toast = ({ children, intent }: ToastProps) => {\n  const { root, group, title, description } = toastPotion({\n    intent,\n  });\n  return (\n    <ToastProvider>\n      <Portal>\n        <ToastPlacements>\n          {(placements) =>\n            placements.map((placement) => (\n              <ToastGroup\n                key={placement}\n                placement={placement}\n                className={group()}\n              >\n                {(toasts) =>\n                  toasts.map((toast) => (\n                    <ToastRoot\n                      className={root({ className: \"w-72\" })}\n                      key={toast.id}\n                      toast={toast}\n                    >\n                      <div className=\"flex flex-col gap-4\">\n                        <div className=\"flex flex-col gap-1\">\n                          <ToastTitle className={title()} />\n                          <ToastDescription className={description()} />\n                        </div>\n                        <div className=\"absolute right-0 top-0 p-4\">\n                          <ToastCloseTrigger asChild>\n                            <button>\n                              <X />\n                            </button>\n                          </ToastCloseTrigger>\n                        </div>\n                      </div>\n                    </ToastRoot>\n                  ))\n                }\n              </ToastGroup>\n            ))\n          }\n        </ToastPlacements>\n      </Portal>\n      {children}\n    </ToastProvider>\n  );\n};\n"
  },
  {
    "name": "tooltip",
    "files": "import { tooltipPotion } from \"@/components/base/tooltipPotion\";\nimport {\n  TooltipArrow,\n  TooltipArrowTip,\n  TooltipContent,\n  TooltipPositioner,\n  Tooltip as TooltipRoot,\n  TooltipTrigger,\n  type TooltipProps as ArkToolTipProps,\n} from \"@ark-ui/react\";\n\nexport type TooltipProps = Partial<ArkToolTipProps> & {\n  placement?: NonNullable<ArkToolTipProps[\"positioning\"]>[\"placement\"];\n};\nconst { positioner, content } = tooltipPotion();\n\nexport const Tooltip = (props: TooltipProps) => {\n  const { placement = \"top\", ...tooltipProps } = props;\n  return (\n    <TooltipRoot\n      openDelay={0}\n      closeDelay={200}\n      positioning={{ placement }}\n      {...tooltipProps}\n    >\n      <TooltipTrigger asChild>\n        <span>Hover me</span>\n      </TooltipTrigger>\n      <TooltipPositioner className={positioner()}>\n        <TooltipArrow>\n          <TooltipArrowTip />\n        </TooltipArrow>\n        <TooltipContent className={content()}>My Tooltip</TooltipContent>\n      </TooltipPositioner>\n    </TooltipRoot>\n  );\n};\n"
  },
  {
    "name": "Slider",
    "files": "import { SliderLabel, SliderRoot, SliderThumb } from \"@/components/base/slider\";\n\nexport const Slider = () => {\n  return (\n    <SliderRoot defaultValue={30}>\n      <SliderLabel>Opacity</SliderLabel>\n      <SliderThumb />\n    </SliderRoot>\n  );\n};\n"
  },
  {
    "name": "Switch",
    "files": "import { Switch } from \"@/components/base/switch\";\n\nexport const SwitchExample = () => {\n  return <Switch>On/Off</Switch>;\n};\n"
  },
  {
    "name": "Toggle",
    "files": "import { Toggle } from \"@/components/base/toggle\";\n\nexport const ToggleExample = () => {\n  return <Toggle>Mode</Toggle>;\n};\n"
  }
];