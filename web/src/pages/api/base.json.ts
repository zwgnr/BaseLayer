import type { APIRoute } from "astro";

type Component = {
  component: string;
  name: string;
  files: string;
};

const components: Component[] = [
  {
    component: "badge",
    name: "Badge",
    files: "import type { HTMLAttributes } from \"react\";\nimport { tv, VariantProps } from \"tailwind-variants\";\n\nexport const badge = tv({\n  base: \"flex items-center justify-center rounded-md\",\n  variants: {\n    intent: {\n      default: \"bg-surface-3\",\n      info: \"bg-secondary text-secondary-fg\",\n      alert: \"bg-critical\",\n    },\n    size: {\n      sm: \"h-6 px-2 py-1 text-sm\",\n      md: \"h-8 px-4 py-1 text-base\",\n      lg: \"h-10 px-6 py-2 text-lg\",\n    },\n  },\n  defaultVariants: {\n    intent: \"default\",\n    size: \"md\",\n  },\n});\n\nexport interface BadgeProps\n  extends HTMLAttributes<HTMLSpanElement>,\n    VariantProps<typeof badge> {}\n\nexport const Badge = ({ className, size, intent, ...props }: BadgeProps) => (\n  <div className={badge({ size, intent, className })} {...props} />\n);\n\nBadge.displayName = \"Badge\";\n"
  },
  {
    component: "breadcrumbs",
    name: "Breadcrumbs",
    files: "import {\n  Breadcrumbs as AriaBreadcrumbs,\n  Item,\n  ItemProps,\n  Link,\n  LinkProps,\n  type BreadcrumbsProps as AriaBreadcrumbsProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst breadcrumbs = tv({\n  slots: {\n    root: \"[&>ol]:font-md [&>ol]:m-0 [&>ol]:flex [&>ol]:list-none [&>ol]:items-center [&>ol]:gap-2 [&>ol]:p-0\",\n    link: \"relative cursor-pointer text-fg-5 outline-none data-[hovered]:underline [&[aria-current]]:font-extrabold [&[aria-current]]:text-fg\",\n    item: \"flex items-center gap-2\",\n  },\n});\n\nconst { root, link, item } = breadcrumbs();\n\nconst Breadcrumbs = <T extends object>({\n  children,\n  className,\n  ...props\n}: AriaBreadcrumbsProps<T> & { className?: string }) => (\n  <AriaBreadcrumbs className={root({ className })} {...props}>\n    {children}\n  </AriaBreadcrumbs>\n);\n\nBreadcrumbs.displayName = \"Breadcrumbs\";\n\nconst BreadCrumbsLink = ({\n  children,\n  className,\n  ...props\n}: LinkProps & { className?: string }) => (\n  <Link className={link({ className })} {...props}>\n    {children}\n  </Link>\n);\n\nBreadCrumbsLink.displayName = \"BreadCrumbsLink\";\n\nconst BreadCrumbsItem = ({\n  children,\n  className,\n  ...props\n}: ItemProps & { className?: string }) => (\n  <Item className={item({ className })} {...props}>\n    {children}\n  </Item>\n);\n\nBreadCrumbsItem.displayName = \"BreadCrumbsItem\";\n\nexport { BreadCrumbsItem, BreadCrumbsLink, Breadcrumbs };\n"
  },
  {
    component: "button",
    name: "Button",
    files: "import {\n  Button as AriaButton,\n  ButtonProps as AriaButtonProps,\n} from \"react-aria-components\";\n\nimport { VariantProps, tv } from \"tailwind-variants\";\n\nconst button = tv({\n  base: \"ring-offset-background inline-flex appearance-none items-center justify-center rounded-md font-medium outline-none transition-transform duration-100 disabled:pointer-events-none disabled:opacity-50 data-[pressed]:scale-[.97] data-[hovered]:bg-primary/70 data-[focus-visible]:ring-2\",\n  variants: {\n    intent: {\n      primary: \"bg-primary text-primary-fg data-[hovered]:bg-primary/70\",\n      secondary:\n        \"bg-secondary text-secondary-fg data-[hovered]:bg-secondary/70\",\n    },\n    state: {\n      filled: \"\",\n      ghost: \"\",\n      soft: \"\",\n      outline: \"\",\n    },\n    size: {\n      sm: \"h-8 px-2 text-sm\",\n      md: \"text-md h-10 px-4\",\n      lg: \"h-12 px-6 text-lg\",\n    },\n  },\n  compoundVariants: [\n    {\n      intent: \"primary\",\n      state: \"ghost\",\n      class:\n        \"border-2 border-primary bg-primary/30 text-fg data-[hovered]:bg-primary\",\n    },\n    {\n      intent: \"primary\",\n      state: \"soft\",\n      class: \"bg-primary/50 data-[hovered]:bg-primary/30\",\n    },\n    {\n      intent: \"primary\",\n      state: \"outline\",\n      class:\n        \"text-primary-content border-2 border-primary bg-transparent data-[hovered]:bg-primary data-[hovered]:text-primary-fg\",\n    },\n    {\n      intent: \"secondary\",\n      state: \"ghost\",\n      class:\n        \"border-2 border-secondary bg-secondary/30 data-[hovered]:bg-secondary\",\n    },\n    {\n      intent: \"secondary\",\n      state: \"soft\",\n      class: \"bg-secondary/50 text-secondary-fg data-[hovered]:bg-secondary/30\",\n    },\n    {\n      intent: \"secondary\",\n      state: \"outline\",\n      class:\n        \"border-2 border-secondary bg-transparent text-fg data-[hovered]:bg-secondary data-[hovered]:text-secondary-fg\",\n    },\n  ],\n  defaultVariants: {\n    intent: \"primary\",\n    state: \"filled\",\n    size: \"md\",\n  },\n});\n\ntype ButtonVariantProps = VariantProps<typeof button>;\n\ninterface ButtonProps extends AriaButtonProps, ButtonVariantProps {\n  className?: string;\n}\n\nexport const Button = ({\n  className,\n  size,\n  intent,\n  state,\n  children,\n  ...props\n}: ButtonProps) => (\n  <AriaButton className={button({ className, size, intent, state })} {...props}>\n    {children}\n  </AriaButton>\n);\n\nButton.displayName = \"Button\";\n"
  },
  {
    component: "calendar",
    name: "Calendar",
    files: "import { ChevronLeft, ChevronRight } from \"lucide-react\";\n\nimport {\n  Calendar as AriaCalendar,\n  CalendarProps as AriaCalendarProps,\n  Button,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  DateValue,\n  Heading,\n  Text,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst calendar = tv({\n  slots: {\n    root: \"w-fit max-w-full rounded-xl border border-border bg-surface p-4 text-fg shadow-lg\",\n    header: \"mb-4 flex items-center \",\n    heading: \"text-md m-0 flex-1 text-center text-lg font-bold\",\n    gridHeaderCell: \"pb-2 text-sm text-fg-5\",\n    iconButton:\n      \"m-0 flex h-8 w-8 appearance-none items-center justify-center rounded-md text-center outline-none hover:bg-surface-2\",\n    cell: \" -m-[1px] mb-1 flex h-8 w-8 items-center justify-center rounded-md p-5 text-center text-sm outline-none hover:bg-surface-2 [&[data-outside-month]]:hidden  [&[data-pressed]]:bg-surface-2 [&[data-selected]]:bg-primary [&[data-selected]]:text-primary-fg [&[data-unavailable]]:text-fg-6 [&[data-unavailable]]:line-through\",\n  },\n});\n\nconst { root, header, heading, gridHeaderCell, cell, iconButton } = calendar();\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<AriaCalendarProps<T>, \"className\"> {\n  error?: string;\n  className?: string;\n}\n\nexport const Calendar = ({\n  className,\n  error,\n  ...props\n}: CalendarProps<DateValue>) => (\n  <AriaCalendar {...props} className={root({ className })}>\n    <header className={header()}>\n      <Button className={iconButton()} slot=\"previous\">\n        <ChevronLeft className=\"h-6 w-6\" />\n      </Button>\n      <Heading className={heading()} />\n      <Button className={iconButton()} slot=\"next\">\n        <ChevronRight className=\"h-6 w-6\" />\n      </Button>\n    </header>\n    <CalendarGrid>\n      <CalendarGridHeader>\n        {(day) => (\n          <CalendarHeaderCell className={gridHeaderCell()}>\n            {day}\n          </CalendarHeaderCell>\n        )}\n      </CalendarGridHeader>\n      <CalendarGridBody>\n        {(date) => <CalendarCell className={cell()} date={date} />}\n      </CalendarGridBody>\n    </CalendarGrid>\n    {error && <Text slot=\"error\">{error}</Text>}\n  </AriaCalendar>\n);\n\nCalendar.displayName = \"Calendar\";\n"
  },
  {
    component: "checkbox",
    name: "Checkbox",
    files: "import { Check } from \"lucide-react\";\n\nimport { ElementRef, forwardRef } from \"react\";\n\nimport {\n  CheckboxProps as AriaCheckBoxProps,\n  Checkbox as AriaCheckbox,\n} from \"react-aria-components\";\n\nimport { VariantProps, tv } from \"tailwind-variants\";\n\nconst checkbox = tv({\n  slots: {\n    root: \"flex items-center justify-center gap-2 py-1\",\n    box: \"flex items-center justify-center rounded-lg border border-border transition-all duration-200\",\n  },\n  variants: {\n    size: {\n      sm: { box: \"h-4 w-4 rounded-md\", root: \"text-sm\" },\n      md: { box: \"h-6 w-6 rounded-md\", root: \"text-md\" },\n      lg: { box: \"h-8 w-8 rounded-md\", root: \"text-lg\" },\n    },\n    selected: {\n      true: { box: \"border-primary bg-primary\" },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    selected: false,\n  },\n});\n\ntype CheckboxVariantProps = VariantProps<typeof checkbox>;\n\ninterface CheckBoxProps extends CheckboxVariantProps, AriaCheckBoxProps {\n  className?: string;\n}\n\nexport const Checkbox = forwardRef<\n  ElementRef<typeof AriaCheckbox>,\n  CheckBoxProps\n>(({ className, size, children, ...props }, ref) => {\n  return (\n    <AriaCheckbox\n      className={checkbox({ size }).root({ className })}\n      ref={ref}\n      {...props}\n    >\n      {({ isSelected }) => (\n        <>\n          <div className={checkbox({ selected: isSelected, size }).box()}>\n            {isSelected && <Check />}\n          </div>\n          {children}\n        </>\n      )}\n    </AriaCheckbox>\n  );\n});\n\nCheckbox.displayName = \"Checkbox\";\n"
  },
  {
    component: "checkboxGroup",
    name: "CheckboxGroup",
    files: "import type { CheckboxGroupProps as AriaCheckboxGroupProps } from \"react-aria-components\";\n\nimport {\n  CheckboxGroup as AriaCheckboxGroup,\n  Text,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst checkboxGroup = tv({\n  base: \"flex flex-col items-start gap-2\",\n});\n\ninterface CheckboxGroupProps\n  extends Omit<AriaCheckboxGroupProps, \"className\" | \"children\"> {\n  className?: string;\n  children?: React.ReactNode;\n  label?: string;\n  description?: string;\n  error?: string;\n}\n\nexport const CheckboxGroup = ({\n  className,\n  label,\n  description,\n  error,\n  children,\n  ...props\n}: CheckboxGroupProps) => (\n  <AriaCheckboxGroup {...props} className={checkboxGroup({ className })}>\n    {label}\n    {children}\n    {description && (\n      <Text className=\"text-md\" slot=\"description\">\n        {description}\n      </Text>\n    )}\n    {error && (\n      <Text className=\"text-md text-critical\" slot=\"error\">\n        {error}\n      </Text>\n    )}\n  </AriaCheckboxGroup>\n);\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n"
  },
  {
    component: "combobox",
    name: "Combobox",
    files: "import type {\n  ComboBoxProps as AriaComboBoxProps,\n  ItemProps,\n} from \"react-aria-components\";\n\nimport {\n  ComboBox as AriaComboBox,\n  Button,\n  Input,\n  Item,\n  Label,\n  ListBox,\n  Popover,\n  Text,\n} from \"react-aria-components\";\n\nimport { ChevronDown } from \"lucide-react\";\nimport { tv } from \"tailwind-variants\";\n\nconst combobox = tv({\n  slots: {\n    input:\n      \"m-0 w-64 rounded-md border border-border bg-surface p-2 align-middle text-fg\",\n    root: \"max-h-inherit overflow-auto p-1 outline-none\",\n    item: \"relative m-1 flex cursor-default flex-col rounded-md p-2 outline-none hover:bg-surface-2 aria-selected:bg-secondary  aria-selected:text-secondary-fg\",\n    popover:\n      \"w-64 rounded-xl border border-border bg-surface p-2 text-fg shadow-xl outline-none\",\n    button:\n      \"absolute right-2 flex appearance-none items-center justify-center rounded-md border-0 outline-none hover:bg-surface-2\",\n  },\n});\n\nconst { input, button, item, popover, root } = combobox();\n\ninterface ComboBoxProps<T extends object>\n  extends Omit<AriaComboBoxProps<T>, \"children\"> {\n  className?: string;\n  label?: string;\n  description?: string | null;\n  errorMessage?: string | null;\n  children: React.ReactNode | ((item: T) => React.ReactNode);\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  className,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: ComboBoxProps<T>) => (\n  <AriaComboBox className={root({ className })} {...props}>\n    <Label className=\"text-fg\">{label}</Label>\n    <div className=\"relative flex w-fit items-center rounded-2xl bg-surface\">\n      <Input className={input()} />\n      <Button className={button()}>\n        <ChevronDown className=\"text-fg\" />\n      </Button>\n    </div>\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    <Popover className={popover()}>\n      <ListBox>{children}</ListBox>\n    </Popover>\n  </AriaComboBox>\n);\n\nComboBox.displayName = \"ComboBox\";\n\nconst ComboBoxItem = (props: ItemProps) => (\n  <Item {...props} className={item()} />\n);\n\nComboBoxItem.displayName = \"ComboBoxItem\";\n\nexport { ComboBox, ComboBoxItem };\n"
  },
  {
    component: "dateField",
    name: "DateField",
    files: "import type {\n  DateFieldProps as AriaDateFieldProps,\n  DateValue,\n} from \"react-aria-components\";\n\nimport {\n  DateField as AriaDateField,\n  DateInput,\n  DateSegment,\n  Label,\n  Text,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst dateField = tv({\n  slots: {\n    input:\n      \"min-w-sm flex w-fit whitespace-nowrap rounded-md border border-border p-2 outline-none\",\n    segmentStyles:\n      \"rounded-md p-1 text-end outline-none focus:bg-secondary focus:text-secondary-fg\",\n  },\n});\n\nconst { input, segmentStyles } = dateField();\n\ninterface DateFieldProps<T extends DateValue> extends AriaDateFieldProps<T> {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nexport const DateField = <T extends DateValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateFieldProps<T>) => (\n  <AriaDateField className=\"flex flex-col gap-2\" {...props}>\n    <Label>{label}</Label>\n    <DateInput className={input()}>\n      {(segment) => (\n        <DateSegment className={segmentStyles()} segment={segment} />\n      )}\n    </DateInput>\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n  </AriaDateField>\n);\n"
  },
  {
    component: "datePicker",
    name: "DatePicker",
    files: "import type { DatePickerProps as AriaDatePickerProps } from \"react-aria-components\";\n\nimport {\n  DatePicker as AriaDatePicker,\n  Button,\n  DateInput,\n  DateSegment,\n  DateValue,\n  Dialog,\n  Group,\n  Label,\n  Popover,\n  Text,\n} from \"react-aria-components\";\n\nimport { Calendar } from \"@/components/base/calendar\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst datePicker = tv({\n  slots: {\n    group:\n      \"relative flex w-fit  items-center rounded-md border border-border bg-surface shadow-lg\",\n    iconButton:\n      \"appearance-none border-none bg-primary p-0 align-middle text-primary-fg outline-none\",\n    input:\n      \"flex w-fit whitespace-nowrap rounded-md border border-transparent bg-transparent py-2 pl-2 pr-12 focus-within:border-secondary\",\n    inputButton:\n      \"absolute right-2 flex appearance-none items-center justify-center rounded-md border-0 outline-none hover:bg-surface-2\",\n    dateSegment:\n      \"rounded-md p-1 pr-2 text-end focus:bg-secondary focus:text-secondary-fg focus:outline-none\",\n    popover:\n      \"overflow-auto px-4 pb-4 [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n  },\n});\n\nconst { group, input, inputButton, dateSegment, popover } = datePicker();\n\ninterface DatePickerProps<T extends DateValue> extends AriaDatePickerProps<T> {\n  label?: string;\n  description?: string;\n  error?: string;\n}\n\nexport const DatePicker = <T extends DateValue>({\n  className,\n  label,\n  description,\n  error,\n  children,\n  ...props\n}: DatePickerProps<T>) => (\n  <AriaDatePicker className={className} {...props}>\n    <Label className=\"text-sm\">{label}</Label>\n    <Group className={group()}>\n      <DateInput className={input()}>\n        {(segment) => (\n          <DateSegment className={dateSegment()} segment={segment} />\n        )}\n      </DateInput>\n      <Button className={inputButton()}>\n        <ChevronDown />\n      </Button>\n    </Group>\n    {description && (\n      <Text className=\"text-sm\" slot=\"description\">\n        {description}\n      </Text>\n    )}\n    {error && <Text slot=\"error\">{error}</Text>}\n    <Popover className={popover()}>\n      <Dialog>\n        <Calendar />\n      </Dialog>\n    </Popover>\n  </AriaDatePicker>\n);\n"
  },
  {
    component: "dateRangePicker",
    name: "DateRangePicker",
    files: "import {\n  DateRangePicker as AriaDateRangePicker,\n  Button,\n  DateInput,\n  DateSegment,\n  Dialog,\n  Group,\n  Label,\n  Popover,\n} from \"react-aria-components\";\n\nimport { RangeCalendar } from \"@/components/base/rangeCalendar\";\n\nimport { ChevronDown } from \"lucide-react\";\n\nimport type {\n  DateRangePickerProps as AriaDateRangePickerProps,\n  DateValue,\n} from \"react-aria-components\";\n\nimport { Text } from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst dateRangePicker = tv({\n  slots: {\n    group:\n      \"relative flex w-fit flex-wrap items-center rounded-md border border-border bg-surface shadow-lg\",\n    iconButton:\n      \"appearance-none border-none bg-primary p-0 align-middle text-primary-fg outline-none\",\n    input:\n      \"flex w-fit whitespace-nowrap rounded-md border border-transparent bg-transparent py-2 pl-2 pr-12 \",\n    inputButton:\n      \"absolute right-2 flex appearance-none items-center justify-center rounded-md border-0 outline-none hover:bg-surface-2\",\n    dateSegment:\n      \"rounded-md p-1 pr-2 text-end focus:bg-secondary focus:text-secondary-fg focus:outline-none\",\n    popover:\n      \"overflow-auto px-4 pb-4 [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n  },\n});\n\nconst { group, input, inputButton, dateSegment, popover } = dateRangePicker();\n\ninterface DateRangePickerProps<T extends DateValue>\n  extends AriaDateRangePickerProps<T> {\n  label?: string;\n  description?: string;\n  error?: string;\n}\n\nexport const DateRangePicker = <T extends DateValue>({\n  className,\n  label,\n  description,\n  error,\n  children,\n  ...props\n}: DateRangePickerProps<T>) => (\n  <AriaDateRangePicker className={className} {...props}>\n    <Label className=\"text-sm\">{label}</Label>\n    <Group className={group()}>\n      <DateInput slot=\"start\" className={input()}>\n        {(segment) => (\n          <DateSegment className={dateSegment()} segment={segment} />\n        )}\n      </DateInput>\n      <span className=\"-ml-10\" aria-hidden=\"true\">\n        –\n      </span>\n      <DateInput slot=\"end\" className={input()}>\n        {(segment) => (\n          <DateSegment className={dateSegment()} segment={segment} />\n        )}\n      </DateInput>\n      <Button className={inputButton()}>\n        <ChevronDown />\n      </Button>\n    </Group>\n    {description && (\n      <Text className=\"text-sm\" slot=\"description\">\n        {description}\n      </Text>\n    )}\n    {error && <Text slot=\"error\">{error}</Text>}\n    <Popover className={popover()}>\n      <Dialog>\n        <RangeCalendar />\n      </Dialog>\n    </Popover>\n  </AriaDateRangePicker>\n);\n"
  },
  {
    component: "dialog",
    name: "Dialog",
    files: "import {\n  Dialog as AriaDialogContent,\n  DialogTrigger as AriaDialogTrigger,\n  DialogProps,\n  Modal,\n  ModalOverlay,\n  ModalOverlayProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst dialog = tv({\n  slots: {\n    container: \"fixed inset-0 z-40 flex items-center justify-center\",\n    content: \"flex flex-col gap-6 text-fg outline-none\",\n    modal:\n      \"max-w-3/4 w-3/4 rounded-xl bg-surface p-6 outline-none md:w-96 [&[data-entering]]:animate-zoom\",\n    overlay:\n      \"fixed left-0 top-0 z-50 flex h-[var(--visual-viewport-height)] w-screen items-center justify-center bg-slate-500/50 [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n  },\n});\n\nconst { overlay, modal, content } = dialog();\n\nconst DialogModal = ({\n  children,\n  className,\n  ...props\n}: ModalOverlayProps & { className?: string }) => (\n  <ModalOverlay {...props} isDismissable={true} className={overlay()}>\n    <Modal className={modal({ className })}>{children}</Modal>\n  </ModalOverlay>\n);\n\nconst DialogContent = ({\n  children,\n  className,\n  ...props\n}: DialogProps & { className?: string }) => (\n  <AriaDialogContent {...props} className={content({ className })}>\n    {children}\n  </AriaDialogContent>\n);\n\nconst DialogTrigger = AriaDialogTrigger;\n\nexport { DialogContent, DialogModal, DialogTrigger };\n"
  },
  {
    component: "listBox",
    name: "ListBox",
    files: "import { Menu } from \"lucide-react\";\n\nimport {\n  ListBox as AriaListBox,\n  Item,\n  ItemProps,\n  ListBoxProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nexport const listBox = tv({\n  slots: {\n    root: \"flex w-72 flex-col overflow-auto rounded-xl border border-surface-2 p-2 shadow-xl outline-none \",\n    item: \"relative my-1 flex cursor-default flex-row items-center rounded-md p-2  outline-none  aria-selected:bg-primary aria-selected:text-primary-fg [&[data-dragging]]:opacity-50\",\n  },\n});\n\nconst { root, item } = listBox();\n\nconst ListBox = <T extends object>({\n  children,\n  className,\n  ...props\n}: ListBoxProps<T> & { className?: string }) => (\n  <AriaListBox {...props} className={root({ className })}>\n    {children}\n  </AriaListBox>\n);\n\nconst ListBoxItem = <T extends object>({\n  children,\n  className,\n  ...props\n}: ItemProps<T> & { className?: string }) => {\n  let textValue = typeof children === \"string\" ? children : undefined;\n\n  return (\n    <Item textValue={textValue} {...props} className={item({ className })}>\n      {({ allowsDragging, isSelected }) => (\n        <div className=\"flex items-center gap-2\">\n          <>\n            {/* Add elements for drag and drop and selection. */}\n            {allowsDragging && (\n              <Menu\n                className={`mr-4 h-4 w-4 text-fg ${\n                  isSelected ? \"text-primary-fg\" : \"\"\n                }`}\n              />\n            )}\n            {}\n            {children}\n          </>\n        </div>\n      )}\n    </Item>\n  );\n};\n\nexport { ListBox, ListBoxItem };\n"
  },
  {
    component: "menu",
    name: "Menu",
    files: "import type { HTMLAttributes } from \"react\";\n\nimport {\n  Header as AriaHeader,\n  Menu as AriaMenu,\n  MenuTrigger as AriaMenuTrigger,\n  Section as AriaSection,\n  Item,\n  ItemProps,\n  Popover,\n  PopoverProps,\n  Separator,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nexport const menu = tv({\n  slots: {\n    menuPopover:\n      \"overflow-auto rounded-xl border border-border bg-surface shadow-xl [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut \",\n    header: \"p-2\",\n    content: \"flex h-fit w-56 flex-col gap-2 p-2 outline-none\",\n    item: \"relative flex cursor-pointer justify-between rounded-md p-2 text-fg outline-none hover:bg-surface-2\",\n    separator: \"mx-2 my-2 h-[1px] bg-surface-3\",\n  },\n});\n\nconst { menuPopover, content, header, item, separator } = menu();\n\nconst MenuTrigger = AriaMenuTrigger;\nconst Section = AriaSection;\n\nconst MenuConent = ({\n  children,\n  className,\n  ...props\n}: PopoverProps & { className?: string }) => (\n  <Popover isNonModal {...props} className={menuPopover()}>\n    <AriaMenu className={content({ className })}>{children}</AriaMenu>\n  </Popover>\n);\n\nconst MenuItem = ({\n  children,\n  className,\n  ...props\n}: ItemProps & { className?: string }) => (\n  <Item {...props} className={item({ className })}>\n    {children}\n  </Item>\n);\n\nconst MenuHeader = ({\n  children,\n  className,\n  ...props\n}: HTMLAttributes<HTMLElement> & { className?: string }) => (\n  <AriaHeader {...props} className={header({ className })}>\n    {children}\n  </AriaHeader>\n);\n\nconst MenuSeperator = ({\n  children,\n  className,\n  ...props\n}: HTMLAttributes<HTMLElement> & { className?: string }) => (\n  <Separator {...props} className={separator({ className })} />\n);\n\nexport {\n  MenuConent,\n  MenuHeader,\n  MenuItem,\n  MenuSeperator,\n  MenuTrigger,\n  Section,\n};\n"
  },
  {
    component: "meter",
    name: "Meter",
    files: "import {\n  Meter as AriaMeter,\n  Label,\n  type MeterProps as AriaMeterProps,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nexport const meter = tv({\n  slots: {\n    root: \"flex w-56 flex-col gap-2\",\n    bar: \"h-4 overflow-hidden rounded-md border border-border shadow-md\",\n    fill: \"h-full bg-primary\",\n    label: \"text-fg-3\",\n  },\n});\n\nconst { root, bar, fill } = meter();\n\nexport const Meter = ({\n  label,\n  ...props\n}: AriaMeterProps & { label?: string }) => (\n  <AriaMeter className={root()} {...props}>\n    {({ percentage, valueText }) => (\n      <>\n        <div className=\"flex justify-between\">\n          <Label className=\"text-fg\">{label}</Label>\n          <span className=\"value text-fg\">{valueText}</span>\n        </div>\n        <div className={bar()}>\n          <div className={fill()} style={{ width: percentage + \"%\" }} />\n        </div>\n      </>\n    )}\n  </AriaMeter>\n);\n"
  },
  {
    component: "modal",
    name: "Modal",
    files: "import {\n  Dialog as AriaDialogContent,\n  DialogTrigger as AriaDialogTrigger,\n  Modal as AriaModal,\n  DialogProps,\n  ModalOverlay,\n  ModalOverlayProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nexport const modal = tv({\n  slots: {\n    container: \"fixed inset-0 z-40 flex items-center justify-center\",\n    content: \"flex flex-col gap-6 outline-none\",\n    modalStyles:\n      \"max-w-3/4 w:3/4 rounded-xl bg-surface p-6 text-fg outline-none md:w-96 [&[data-entering]]:animate-zoom\",\n    overlay:\n      \"fixed left-0 top-0 z-50 flex h-[var(--visual-viewport-height)] w-screen items-center justify-center bg-slate-500/50 [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n  },\n});\n\nconst { overlay, modalStyles, content } = modal();\n\ninterface ModalProps extends Omit<ModalOverlayProps, \"className\"> {\n  className?: string;\n}\n\nconst Modal = ({ children, className, ...props }: ModalProps) => (\n  <ModalOverlay className={overlay()}>\n    <AriaModal {...props} className={modalStyles({ className })}>\n      {children}\n    </AriaModal>\n  </ModalOverlay>\n);\n\nconst ModalContent = ({ children, className, ...props }: DialogProps) => (\n  <AriaDialogContent {...props} className={content({ className })}>\n    {children}\n  </AriaDialogContent>\n);\n\nconst ModalTrigger = AriaDialogTrigger;\n\nexport { Modal, ModalContent, ModalTrigger };\n"
  },
  {
    component: "popover",
    name: "Popover",
    files: "import {\n  DialogTrigger as AriaDialogTrigger,\n  Popover as AriaPopover,\n  Dialog,\n  type PopoverProps as AriaPopoverProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nexport const popover = tv({\n  slots: {\n    root: \"m-1 max-w-lg rounded-xl border border-border bg-surface p-2 text-fg shadow-xl outline-none [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n    content: \"outline-none\",\n  },\n});\n\nconst { root, content } = popover();\n\ninterface DialogProps extends Omit<AriaPopoverProps, \"children\"> {\n  children: React.ReactNode;\n}\n\nconst PopoverTrigger = AriaDialogTrigger;\n\nconst Popover = ({ children, ...props }: DialogProps) => (\n  <AriaPopover className={root()} {...props}>\n    <Dialog className={content()}>{children}</Dialog>\n  </AriaPopover>\n);\n\nexport { Popover, PopoverTrigger };\n"
  },
  {
    component: "radioGroup",
    name: "RadioGroup",
    files: "import type {\n  RadioGroupProps as AriaRadioGroupProps,\n  RadioProps,\n} from \"react-aria-components\";\n\nimport {\n  Radio as AriaRadio,\n  RadioGroup as AriaRadioGroup,\n  Text,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst radioGroup = tv({\n  slots: {\n    radio:\n      \"flex items-center gap-2 text-fg before:block before:h-5 before:w-5 before:rounded-full before:border before:border-border before:transition-all [&[data-selected]]:before:border-4 [&[data-selected]]:before:border-primary\",\n    group: \"flex flex-col gap-4 text-fg\",\n  },\n});\n\nconst { group, radio } = radioGroup();\n\ninterface RadioGroupProps extends Omit<AriaRadioGroupProps, \"children\"> {\n  className?: string;\n  children?: React.ReactNode;\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nconst RadioGroup = ({\n  className,\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: RadioGroupProps) => (\n  <AriaRadioGroup className={group({ className })} {...props}>\n    {label}\n    {children}\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n  </AriaRadioGroup>\n);\n\nconst Radio = ({\n  children,\n  className,\n  ...props\n}: RadioProps & {\n  className?: string;\n}) => (\n  <AriaRadio className={radio({ className })} {...props}>\n    {children}\n  </AriaRadio>\n);\n\nexport { Radio, RadioGroup };\n"
  },
  {
    component: "rangeCalendar",
    name: "RangeCalendar",
    files: "import { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport {\n  RangeCalendar as AriaRangeCalendar,\n  RangeCalendarProps as AriaRangeCalendarProps,\n  Button,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  DateValue,\n  Heading,\n  Text,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nexport const rangeCalendar = tv({\n  slots: {\n    root: \"w-fit max-w-full rounded-xl border border-border bg-surface p-4 text-fg shadow-lg \",\n    header: \"mb-4 flex items-center \",\n    heading: \"text-md m-0 flex-1 text-center text-lg font-bold\",\n    gridHeaderCell: \"pb-2 text-sm text-fg-5\",\n    iconButton:\n      \"m-0 flex h-8 w-8 appearance-none items-center justify-center rounded-md text-center outline-none hover:bg-surface-2\",\n    cell: \"-m-[1px] mb-1 flex h-8 w-8  items-center justify-center rounded-md p-5 text-center text-sm outline-none hover:bg-surface-2 data-[selected]:rounded-none [&[data-outside-month]]:hidden [&[data-pressed]]:bg-surface-2 [&[data-selected]]:bg-primary  [&[data-selected]]:text-primary-fg [&[data-selection-end]]:rounded-r-md [&[data-selection-start]]:rounded-l-md [&[data-unavailable]]:text-fg-6 [&[data-unavailable]]:line-through\",\n  },\n});\n\nconst { root, header, heading, gridHeaderCell, cell, iconButton } =\n  rangeCalendar();\n\ninterface RangeCalendarCalendarProps<T extends DateValue>\n  extends Omit<AriaRangeCalendarProps<T>, \"className\"> {\n  error?: string;\n  className?: string;\n}\n\nexport const RangeCalendar = (props: RangeCalendarCalendarProps<DateValue>) => {\n  const { className, error, children, ...restProps } = props;\n  return (\n    <AriaRangeCalendar {...restProps} className={root({ className })}>\n      <header className={header()}>\n        <Button className={iconButton()} slot=\"previous\">\n          <ChevronLeft className=\"h-6 w-6\" />\n        </Button>\n        <Heading className={heading()} />\n        <Button className={iconButton()} slot=\"next\">\n          <ChevronRight className=\"h-6 w-6\" />\n        </Button>\n      </header>\n      <CalendarGrid>\n        <CalendarGridHeader>\n          {(day) => (\n            <CalendarHeaderCell className={gridHeaderCell()}>\n              {day}\n            </CalendarHeaderCell>\n          )}\n        </CalendarGridHeader>\n        <CalendarGridBody>\n          {(date) => <CalendarCell className={cell()} date={date} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {error && <Text slot=\"error\">{error}</Text>}\n    </AriaRangeCalendar>\n  );\n};\n"
  },
  {
    component: "searchField",
    name: "SearchField",
    files: "import { X } from \"lucide-react\";\n\nimport type { SearchFieldProps as AriaSearchFieldProps } from \"react-aria-components\";\nimport {\n  SearchField as AriaSearchField,\n  Button,\n  Input,\n  Label,\n  Text,\n} from \"react-aria-components\";\n\nimport { VariantProps, tv } from \"tailwind-variants\";\n\nconst searchField = tv({\n  slots: {\n    input:\n      \"font-sm m-0 appearance-none rounded-md border border-border bg-surface p-2 focus:border-primary focus:shadow-xl focus:outline-none\",\n    root: \"flex flex-col gap-2\",\n    button: \"absolute right-2 mt-3 [&[data-empty]]:hidden\",\n  },\n});\n\ntype SearchFieldVariantProps = VariantProps<typeof searchField>;\n\nconst { root, input, button } = searchField();\n\ninterface SearchFieldProps\n  extends AriaSearchFieldProps,\n    SearchFieldVariantProps {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nexport const SearchField = ({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: SearchFieldProps) => (\n  <AriaSearchField className={root()} {...props}>\n    {({ value }) => (\n      <>\n        <Label>{label}</Label>\n        <div className=\"relative items-center\">\n          <Input className={input()} />\n          {value !== \"\" && (\n            <Button className={button()}>\n              <X />\n            </Button>\n          )}\n        </div>\n        {description && <Text slot=\"description\">{description}</Text>}\n        {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n      </>\n    )}\n  </AriaSearchField>\n);\n"
  },
  {
    component: "select",
    name: "Select",
    files: "import type {\n  SelectProps as AriaSelectProps,\n  ItemProps,\n} from \"react-aria-components\";\n\nimport {\n  Select as AriaSelect,\n  Button,\n  Item,\n  Label,\n  ListBox,\n  Popover,\n  SelectValue,\n  Text,\n} from \"react-aria-components\";\n\nimport { ChevronDown } from \"lucide-react\";\nimport { tv } from \"tailwind-variants\";\n\nconst select = tv({\n  slots: {\n    root: \"max-h-inherit flex flex-col gap-2 overflow-auto p-1 outline-none\",\n    item: \"relative m-1 flex cursor-default flex-col rounded-md p-2 outline-none hover:bg-surface-2 \",\n    popover:\n      \"w-64 rounded-xl border bg-surface p-2 text-fg shadow-xl outline-none\",\n    button:\n      \"flex w-56 appearance-none items-center justify-between rounded-md border p-2 outline-none hover:bg-surface-2\",\n  },\n});\n\nconst { button, item, popover, root } = select();\n\ninterface SelectProps<T extends object>\n  extends Omit<AriaSelectProps<T>, \"children\"> {\n  className?: string;\n  label?: string;\n  description?: string | null;\n  errorMessage?: string | null;\n  children: React.ReactNode | ((item: T) => React.ReactNode);\n}\n\nconst Select = <T extends object>({\n  label,\n  className,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: SelectProps<T>) => (\n  <AriaSelect className={root({ className })} {...props}>\n    <Label>{label}</Label>\n    <Button className={button()}>\n      <SelectValue />\n      <ChevronDown />\n    </Button>\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    <Popover className={popover()}>\n      <ListBox className=\"outline-none\">{children}</ListBox>\n    </Popover>\n  </AriaSelect>\n);\n\nconst SelectItem = (props: ItemProps) => {\n  return <Item {...props} className={item()} />;\n};\n\nexport { Select, SelectItem };\n"
  },
  {
    component: "slider",
    name: "Slider",
    files: "import {\n  Slider as AriaSlider,\n  SliderThumb as AriaSliderThumb,\n  SliderTrack as AriaSliderTrack,\n  Label,\n  LabelProps,\n  SliderOutput,\n  SliderProps,\n  SliderThumbProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst slider = tv({\n  slots: {\n    root: \"grid w-64  auto-cols-fr grid-cols-1  text-gray-900\",\n    thumb: \"h-5 w-5 rounded-full bg-secondary\",\n    track:\n      \"relative col-span-2 col-start-1 w-full before:absolute before:top-1/2 before:h-0.5 before:w-full before:-translate-y-1/2 before:transform before:bg-gray-400\",\n    button:\n      \"flex w-56 appearance-none items-center justify-between rounded-lg border p-2 outline-none hover:bg-surface-2\",\n  },\n});\n\nconst { root, thumb, track } = slider();\n\nconst SliderRoot = ({\n  children,\n  className,\n  ...props\n}: SliderProps & { className?: string }) => (\n  <AriaSlider {...props} className={root({ className })}>\n    {children}\n  </AriaSlider>\n);\n\nconst SliderThumb = ({\n  children,\n  className,\n  ...props\n}: SliderThumbProps & { className?: string }) => (\n  <AriaSliderTrack className={track()}>\n    <AriaSliderThumb className={thumb({ className })} {...props} />\n  </AriaSliderTrack>\n);\n\nconst SliderLabel = ({\n  children,\n  className,\n  ...props\n}: LabelProps & { className?: string }) => (\n  <div className=\"col-span-2 my-4 flex w-full justify-between\">\n    <Label className=\"text-sm text-fg\" {...props}>\n      {children}\n    </Label>\n    <SliderOutput className=\"text-sm text-fg\" />\n  </div>\n);\n\nexport { SliderRoot, SliderThumb, SliderLabel };\n"
  },
  {
    component: "switch",
    name: "Switch",
    files: "import type { ReactNode } from \"react\";\n\nimport {\n  Switch as AriaSwitch,\n  SwitchProps as AriaSwitchProps,\n  Label,\n} from \"react-aria-components\";\n\nimport { tv, type VariantProps } from \"tailwind-variants\";\n\nconst switchVariants = tv({\n  slots: {\n    root: \"flex items-center gap-2 transition-none duration-200\",\n    indicator:\n      \"h-6 w-10 cursor-pointer rounded-2xl bg-surface-3 duration-200 before:mx-[2px] before:mt-[2px] before:block before:h-5 before:w-5 before:rounded-2xl before:bg-white before:transition-all\",\n    label: \"text-fg-3\",\n  },\n  variants: {\n    selected: {\n      true: { indicator: \"bg-primary before:translate-x-4\" },\n    },\n  },\n  defaultVariants: {\n    selected: false,\n  },\n});\n\ntype SwitchVariantProps = VariantProps<typeof switchVariants>;\n\ninterface SwitchProps extends SwitchVariantProps, AriaSwitchProps {\n  children?: ReactNode;\n  className?: string | undefined;\n}\n\nexport const Switch = ({ className, children, ...restProps }: SwitchProps) => (\n  <AriaSwitch className={switchVariants().root({ className })} {...restProps}>\n    {({ isSelected }) => (\n      <>\n        <div\n          className={switchVariants({\n            selected: isSelected,\n          }).indicator()}\n        />\n        <Label className={switchVariants().label()}> {children}</Label>\n      </>\n    )}\n  </AriaSwitch>\n);\n"
  },
  {
    component: "table",
    name: "Table",
    files: "import {\n  Column as AriaColumn,\n  Table as AriaTable,\n  TableBody as AriaTableBody,\n  TableHeader as AriaTableheader,\n  Cell,\n  CellProps,\n  Collection,\n  ColumnProps,\n  Row,\n  RowProps,\n  TableHeaderProps,\n  TableProps,\n  useTableOptions,\n} from \"react-aria-components\";\n\nimport { ChevronDown, ChevronUp, Menu } from \"lucide-react\";\nimport { tv } from \"tailwind-variants\";\nimport { Button } from \"@/components/base/button\";\nimport { Checkbox } from \"@/components/base/checkbox\";\n\nconst table = tv({\n  slots: {\n    root: \"table min-h-[100px] w-full border-separate border-spacing-0 self-start rounded-xl border border-border p-4 outline-none\",\n    column: \"border-b-2 border-border px-4 py-1 text-left outline-none\",\n    header: \"text-fg after:table-row after:h-[2px]\",\n    label: \"text-fg-3\",\n    row: \"relative cursor-default rounded-xl text-fg outline-none\",\n  },\n});\n\nconst { root, header, column, row } = table();\n\nconst TableBody = AriaTableBody;\n\nconst Table = ({\n  children,\n  className,\n  ...props\n}: TableProps & { className?: string }) => (\n  <AriaTable {...props} className={root({ className })}>\n    {children}\n  </AriaTable>\n);\n\nconst TableCell = ({\n  children,\n  className,\n  ...props\n}: CellProps & { className?: string }) => (\n  <Cell {...props} className=\"px-4 py-2\">\n    {children}\n  </Cell>\n);\n\nconst Column = ({\n  children,\n  className,\n  ...props\n}: ColumnProps & { className?: string }) => (\n  <AriaColumn {...props} className={column({ className })}>\n    {({ allowsSorting, sortDirection }) => (\n      <div className=\"flex items-center gap-2\">\n        <>\n          {children}\n          {allowsSorting &&\n            (sortDirection === undefined ? (\n              <div className=\"w-6\"></div>\n            ) : sortDirection === \"ascending\" ? (\n              <ChevronUp />\n            ) : (\n              <ChevronDown />\n            ))}\n        </>\n      </div>\n    )}\n  </AriaColumn>\n);\n\nconst TableHeader = <T extends object>({\n  children,\n  className,\n  columns,\n  ...props\n}: TableHeaderProps<T> & { className?: string }) => {\n  let { selectionBehavior, selectionMode, allowsDragging } = useTableOptions();\n  return (\n    <AriaTableheader {...props} className={header()}>\n      {/* Add extra columns for drag and drop and selection. */}\n      {allowsDragging && <Column />}\n      {selectionBehavior === \"toggle\" && (\n        <Column>\n          {selectionMode === \"multiple\" && <Checkbox slot=\"selection\" />}\n        </Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </AriaTableheader>\n  );\n};\n\nconst TableRow = <T extends object>({\n  children,\n  className,\n  columns,\n  id,\n  ...props\n}: RowProps<T> & { className?: string }) => {\n  let { selectionBehavior, allowsDragging } = useTableOptions();\n  return (\n    <Row id={id} {...props} className={row()}>\n      {allowsDragging && (\n        <Cell>\n          <Button className=\"bg-transparent\" slot=\"drag\">\n            <Menu className=\"h-4 w-4 text-fg\" />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === \"toggle\" && (\n        <Cell className=\"\">\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  );\n};\n\nexport { Column, Table, TableBody, TableCell, TableHeader, TableRow };\n"
  },
  {
    component: "tabs",
    name: "Tabs",
    files: "import {\n  Tab as AriaTab,\n  TabList as AriaTabList,\n  TabListProps as AriaTabListProps,\n  TabPanel as AriaTabPanel,\n  TabPanelProps as AriaTabPanelProps,\n  TabProps as AriaTabProps,\n  TabsProps as AriaTabsProps,\n  Tabs as AriaTabsRoot,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst tabs = tv({\n  slots: {\n    root: \"flex w-full flex-col items-start\",\n    list: \"relative inline-flex w-72 items-center justify-between rounded-md p-1\",\n    tab: \"relative flex w-1/3 cursor-pointer justify-center rounded-md border-primary p-2  outline-none transition-colors duration-200 hover:bg-surface-2 aria-selected:cursor-default aria-selected:rounded-none aria-selected:border-b-2 aria-selected:hover:bg-transparent\",\n    panel:\n      \"focus-visible:ring-ring borderp-4 mt-4 w-96 rounded-xl focus-visible:outline-none focus-visible:ring-2\",\n  },\n});\n\nconst { list, root, panel, tab } = tabs();\n\ninterface TabsProps extends Omit<AriaTabsProps, \"className\"> {\n  className?: string;\n}\n\nconst TabsRoot = ({ children, className, ...props }: TabsProps) => (\n  <AriaTabsRoot {...props} className={root({ className })}>\n    {children}\n  </AriaTabsRoot>\n);\n\nTabsRoot.displayName = TabsRoot;\n\ninterface TabListProps<T> extends Omit<AriaTabListProps<T>, \"className\"> {\n  className?: string;\n}\n\nconst TabList = <T extends object>({\n  children,\n  className,\n  ...props\n}: TabListProps<T>) => (\n  <AriaTabList {...props} className={list({ className })}>\n    {children}\n  </AriaTabList>\n);\n\nTabList.displayName = TabList;\n\ninterface TabProps extends Omit<AriaTabProps, \"className\"> {\n  className?: string;\n}\n\nconst Tab = ({ children, className, ...props }: TabProps) => (\n  <AriaTab {...props} className={tab({ className })}>\n    {children}\n  </AriaTab>\n);\n\nTab.displayName = Tab;\n\ninterface TabPanelProps extends Omit<AriaTabPanelProps, \"className\"> {\n  className?: string;\n}\n\nconst TabPanel = ({ children, className, ...props }: TabPanelProps) => (\n  <AriaTabPanel {...props} className={panel({ className })}>\n    {children}\n  </AriaTabPanel>\n);\n\nTabPanel.displayName = TabPanel;\n\nexport { Tab, TabList, TabPanel, TabsRoot };\n"
  },
  {
    component: "tagGroup",
    name: "TagGroup",
    files: "import {\n  Label as AriaLabel,\n  Tag as AriaTag,\n  TagGroupProps as AriaTagGroupProps,\n  TagProps as AriaTagProps,\n  TagGroup,\n  TagList,\n  TagListProps,\n  Text,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { Button } from \"@/components/base/button\";\n\nconst tagGroup = tv({\n  slots: {\n    root: \"flex flex-col gap-2 text-sm\",\n    list: \"flex flex-wrap gap-2\",\n    tag: \"flex cursor-default items-center rounded-md border p-2 outline-none aria-selected:bg-secondary aria-selected:text-secondary-fg\",\n  },\n});\n\nconst { root, list, tag } = tagGroup();\n\nconst Label = AriaLabel;\n\ninterface TagGroupProps<T>\n  extends Omit<AriaTagGroupProps, \"children\">,\n    Pick<TagListProps<T>, \"items\" | \"children\" | \"renderEmptyState\"> {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nconst TagGroupRoot = <T extends object>({\n  label,\n  className,\n  description,\n  errorMessage,\n  items,\n  children,\n  renderEmptyState,\n  ...props\n}: TagGroupProps<T>) => (\n  <TagGroup className={root({ className })} {...props}>\n    <AriaLabel>{label}</AriaLabel>\n    <TagList\n      className={list()}\n      items={items}\n      renderEmptyState={renderEmptyState}\n    >\n      {children}\n    </TagList>\n    {description && (\n      <Text className=\"text-sm\" slot=\"description\">\n        {description}\n      </Text>\n    )}\n    {errorMessage && (\n      <Text className=\"text-sm text-critical\" slot=\"errorMessage\">\n        {errorMessage}\n      </Text>\n    )}\n  </TagGroup>\n);\n\nconst Tag = ({\n  children,\n  className,\n  ...props\n}: AriaTagProps & { className?: string }) => {\n  let textValue = typeof children === \"string\" ? children : undefined;\n  return (\n    <AriaTag className={tag({ className })} textValue={textValue} {...props}>\n      {({ allowsRemoving }) => (\n        <>\n          {children}\n          {allowsRemoving && <Button slot=\"remove\">ⓧ</Button>}\n        </>\n      )}\n    </AriaTag>\n  );\n};\n\nexport { Label, Tag, TagGroupRoot };\n"
  },
  {
    component: "textField",
    name: "TextField",
    files: "import type { TextFieldProps as AriaTextFieldProps } from \"react-aria-components\";\nimport {\n  TextField as AriaTextField,\n  Input,\n  Label,\n  Text,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nexport const textField = tv({\n  slots: {\n    input:\n      \"font-sm m-0 appearance-none rounded-md border border-border bg-surface p-2 focus:border-primary focus:shadow-xl focus:outline-none\",\n    root: \"flex flex-col gap-2\",\n    button: \"absolute right-2 mt-3 [&[data-empty]]:hidden\",\n  },\n});\n\nconst { root, input } = textField();\n\ninterface TextFieldProps extends AriaTextFieldProps {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nexport const TextField = ({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TextFieldProps) => (\n  <AriaTextField className={root()} {...props}>\n    <Label>{label}</Label>\n    <Input className={input()} />\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n  </AriaTextField>\n);\n"
  },
  {
    component: "timeField",
    name: "TimeField",
    files: "import type {\n  TimeFieldProps as AriaTimeFieldProps,\n  TimeValue,\n} from \"react-aria-components\";\nimport {\n  TimeField as AriaTimeField,\n  DateInput,\n  DateSegment,\n  Label,\n  Text,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nexport const timeField = tv({\n  slots: {\n    input:\n      \"min-w-sm flex w-fit whitespace-nowrap rounded-md border border-border p-2 outline-none\",\n    segmentStyles:\n      \"rounded-md p-1 text-end outline-none focus:bg-secondary focus:text-secondary-fg\",\n  },\n});\n\nconst { input, segmentStyles } = timeField();\n\ninterface TimeFieldProps<T extends TimeValue> extends AriaTimeFieldProps<T> {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n}\n\nexport const TimeField = <T extends TimeValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TimeFieldProps<T>) => (\n  <AriaTimeField className=\"flex flex-col gap-2\" {...props}>\n    <Label>{label}</Label>\n    <DateInput className={input()}>\n      {(segment) => (\n        <DateSegment className={segmentStyles()} segment={segment} />\n      )}\n    </DateInput>\n    {description && <Text slot=\"description\">{description}</Text>}\n    {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n  </AriaTimeField>\n);\n"
  },
  {
    component: "toggle",
    name: "Toggle",
    files: "import { ToggleButton, ToggleButtonProps } from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst toggle = tv({\n  base: \"ring-offset-background focus-focus inline-flex appearance-none items-center justify-center rounded-md bg-surface-2 p-2 font-medium outline-none transition-transform  duration-100 disabled:pointer-events-none disabled:opacity-50 [&[aria-pressed=true]]:bg-primary\",\n});\n\nexport const Toggle = ({\n  className,\n  children,\n  ...props\n}: ToggleButtonProps & { className?: string }) => (\n  <ToggleButton className={toggle({ className })} {...props}>\n    {children}\n  </ToggleButton>\n);\n\nToggle.displayName = \"Toggle\";\n"
  },
  {
    component: "tooltip",
    name: "Tooltip",
    files: "import type { ReactNode } from \"react\";\n\nimport {\n  Tooltip as AriaTooltip,\n  TooltipTrigger as AriaTooltipTrigger,\n  type TooltipProps as AriaTooltipProps,\n} from \"react-aria-components\";\n\nimport { tv } from \"tailwind-variants\";\n\nconst tooltip = tv({\n  base: \"m-1 max-w-sm rounded-md border border-border bg-surface p-2 text-fg shadow-xl outline-none [&[data-entering]]:animate-fade [&[data-exiting]]:animate-fadeOut\",\n});\n\nconst TooltipTrigger = AriaTooltipTrigger;\n\ninterface TooltipProps extends Omit<AriaTooltipProps, \"children\"> {\n  className?: string;\n  children: ReactNode;\n}\n\nconst Tooltip = ({ children, className, ...props }: TooltipProps) => (\n  <AriaTooltip className={tooltip({ className })} {...props}>\n    {children}\n  </AriaTooltip>\n);\n\nexport { Tooltip, TooltipTrigger };\n"
  }
];

export const get: APIRoute = () => {
  return {
    body: JSON.stringify(components),
  };
};
